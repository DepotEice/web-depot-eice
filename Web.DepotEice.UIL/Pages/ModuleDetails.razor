@page "/modules/details/{Id:int}"

@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.Helpers;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models;

@inject ILogger<ModuleDetails> Logger;
@inject IMapper Mapper;
@inject IModuleService ModuleService;
@inject IUserService UserService;
@inject UserManager UserManager;

<div class="container">

    @if (!string.IsNullOrEmpty(ReturnUrl))
    {
        <div class="row">
            <a href="@ReturnUrl"><i class="bi bi-arrow-left me-1"></i>Revenir à la page précédente</a>
        </div>
    }

    <h3 class="my-md-3">@Module.Name</h3>

    <div class="row mb-3">
        <span class="fs-6 fst-italic">@Module.TeacherFullName</span>
    </div>

    <div class="row mb-3 pb-3 border-bottom" style="border-radius: 2rem;">
        <span class="fs-5 text-wrap">@Module.Description</span>
    </div>

    <div class="row mb-3">
        <p>
            Les cours auront lieu du <b> @FirstDay.ToString("D") </b> au <b> @LastDay.ToString("D") </b> <br />
            Le : <br />

            @if (SchedulesOfWeek is not null && SchedulesOfWeek.Count > 0)
            {
                <ul>
                    @foreach (var schedule in SchedulesOfWeek)
                    {
                        <li>
                            @(((DaysOfTheWeekFr)schedule.StartAt.DayOfWeek).ToString())
                            de
                            @schedule.StartAt.ToString("t")
                            à
                            @schedule.EndAt.ToString("t")
                        </li>
                    }
                </ul>
            }

        </p>
    </div>

    <Authorize Role="@UserManager.STUDENT_ROLE">
        <Authorized>
            <div class="d-flex flex-lg-row align-items-center">
                @if (IsAccepted.HasValue)
                {
                    if (IsAccepted.Value)
                    {
                        <button type="button" class="btn btn-outline-secondary" disabled>
                            Vous êtes déjà inscris à ce module
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btnbtn-outline-secondary" disabled>
                            Votre demande est en cours de traitement
                        </button>
                    }
                }
                else
                {
                    <button type="button" class="btn btn-outline-primary" @onclick="RequestAcceptance">
                        S'inscrire au module
                    </button>
                }
                <NavLink href="#" class="mx-3">Voir l'horaire</NavLink>
            </div>
        </Authorized>
    </Authorize>
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// The id of the module to display
    /// </summary>
    [Parameter]
    public int Id { get; set; }

    /// <summary>
    /// The return url
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(ReturnUrl))]
    public string? ReturnUrl { get; set; }

    /// <summary>
    /// List of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; private set; } = new();

    /// <summary>
    /// User is accepted in the module
    /// </summary>
    public bool? IsAccepted { get; private set; }

    /// <summary>
    /// The module to display
    /// </summary>
    public ModuleDisplayModel Module { get; private set; } = new();

    public DateTime FirstDay { get; set; }

    public DateTime LastDay { get; set; }

    public List<ScheduleModel> SchedulesOfWeek { get; set; } = new List<ScheduleModel>();

    /// <summary>
    /// Initialization of the component
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        PreloadService?.Show();

        ResultModel<ModuleModel> moduleResult = await ModuleService.GetModuleAsync(Id);

        if (!moduleResult.Success)
        {
            Logger.LogError($"The module request failed with status code \"{moduleResult.Code}\".\n{moduleResult.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement du module",
                $"Le chargement du module a échoué.\n{moduleResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (moduleResult.Data is null)
        {
            Logger.LogError($"The module request succeeded but the data is null.\n{moduleResult.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement du module",
                $"Le chargement du module est réussi mais les données retournées sont null.\n{moduleResult.Data}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        ModuleModel moduleFromRepo = moduleResult.Data;

        Module = Mapper.Map<ModuleDisplayModel>(moduleFromRepo);

        try
        {
            ResultModel<UserModel> result = await UserService.GetUserAsync(moduleFromRepo.TeacherId);

            if (!result.Success)
            {
                Logger.LogError($"The request of the user has failed with status code \"{result.Code}\".\n{result.Message}");

                return;
            }

            if (result.Data is null)
            {
                Logger.LogError($"The requested user data is null.\n{result.Message}");

                return;
            }

            UserModel? teacher = result.Data;

            if (teacher is not null)
            {
                Module.TeacherFullName = $"{teacher.LastName.ToUpper()} {teacher.FirstName}";
            }
        }
        catch (Exception e)
        {
            Logger.LogError(
                "{date} - An exception was thrown when retrieving user and setting user fullname.\n{eMsg}\n{eStr}",
                DateTime.Now,
                e.Message,
                e.StackTrace
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération du professeur",
                $"La récupération du professeur en charge du module a échoué.\n{e.Message}",
                false
            );

            PreloadService?.Hide();
        }

        await SetIsAccepted();
        await GetFirstDay();

        PreloadService?.Hide();
    }

    /// <summary>
    /// Load the schedules
    /// </summary>
    /// <returns></returns>
    private async Task<IEnumerable<ScheduleModel>> LoadSchedulesAsync()
    {
        PreloadService?.Show();

        ResultModel<IEnumerable<ScheduleModel>> scheduleResult = await ModuleService.GetSchedulesAsync(Id);

        if (!scheduleResult.Success)
        {
            Logger.LogError(
                "{date} - Requesting the schedules failed with status code {code}.\n{msg}",
                DateTime.Now,
                scheduleResult.Code,
                scheduleResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Horaires",
                $"Le chargement de l'horaire a échoué.\n{scheduleResult.Message}",
                false
            );

            PreloadService?.Hide();

            return Enumerable.Empty<ScheduleModel>();
        }

        if (scheduleResult.Data is null)
        {
            Logger.LogError(
                "Requesting the schedules succeeded but the data is null.\n{msg}",
                scheduleResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Horaires",
                $"Le chargement de l'horaire a réussi mais les données retournées sont null.\n{scheduleResult.Message}",
                false
            );

            PreloadService?.Hide();

            return Enumerable.Empty<ScheduleModel>();
        }

        PreloadService?.Hide();

        return scheduleResult.Data;
    }

    private async Task GetFirstDay()
    {
        var schedules = (await LoadSchedulesAsync()).OrderBy(s => s.StartAt);

        if (schedules.Count() <= 0)
        {
            Logger.LogError("The list of schedules is empty");

            return;
        }

        ScheduleModel? firstSchedule = schedules.MinBy(s => s.StartAt);

        if (firstSchedule is null)
        {
            Logger.LogError("The first schedule is null");

            return;
        }

        FirstDay = firstSchedule.StartAt;

        ScheduleModel? lastSchedule = schedules.MaxBy(s => s.EndAt);

        if (lastSchedule is null)
        {
            Logger.LogError("The last schedule is null");

            return;
        }

        LastDay = lastSchedule.EndAt;

        var distinctSchedules = schedules.DistinctBy(s => s.StartAt.DayOfWeek);

        foreach (var distinctSchedule in distinctSchedules)
        {
            bool isExceptional = schedules.Count(s => s.StartAt.DayOfWeek == distinctSchedule.StartAt.DayOfWeek) <= 1;

            if (isExceptional)
            {
                Logger.LogInformation(
                    "The schedule on {date} is exceptional and should not be reported in the calendar",
                    distinctSchedule.StartAt.ToString("F")
                );

                continue;
            }

            SchedulesOfWeek.Add(distinctSchedule);
        }
    }

    /// <summary>
    /// Set the value of <see cref="IsAccepted"/> property
    /// </summary>
    /// <returns></returns>
    private async Task SetIsAccepted()
    {
        PreloadService?.Show();

        ResultModel<bool?> userStatusResult = await ModuleService.GetUserModuleStatus(Id);

        if (!userStatusResult.Success)
        {
            Logger.LogError(
                "The request of the user status has failed with status code \"{code}\".\n{msg}",
                userStatusResult.Code,
                userStatusResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération du status",
                $"La récupération de votre status par rapport au module a échoué.\n{userStatusResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        IsAccepted = userStatusResult.Data;

        PreloadService?.Hide();
    }

    /// <summary>
    /// Request the acceptance of the user in the module
    /// </summary>
    /// <returns></returns>
    public async Task RequestAcceptance()
    {
        PreloadService?.Show();

        ResultModel<bool> result = await ModuleService.RequestAcceptance(Id);

        if (!result.Success)
        {
            Logger.LogError(
                "The request of the user status has failed with status code \"{code}\".\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Demande d'inscription",
                $"La demande d'inscription au module a échoué.\n{result.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (result.Data)
        {
            ShowMessage(
                ToastType.Success,
                "Demande d'inscription",
                $"La demande d'inscription au module a réussi.\n{result.Message}",
                false
            );
        }

        await SetIsAccepted();

        StateHasChanged();

        PreloadService?.Hide();
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
