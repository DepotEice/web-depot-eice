@page "/modules"
@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Models;

@inject ILogger<Modules> Logger;
@inject IMapper Mapper;
@inject IModuleService ModuleService;

<h3 class="text-center my-5">Modules disponibles</h3>

<div class="container">
    <InfiniteScrolling ItemsProvider="GetItemsAsync">
        <ItemTemplate Context="item">

            <div class="container">
                <div class="row border-bottom py-3 my-3">
                    <h3 class="border-bottom py-2">@item.Title</h3>
                    <p class="p-3">
                        @item.Description
                    </p>
                    <span>@item.TeacherName</span>
                    <a href="@item.ModuleUrl">Plus de détails</a>
                </div>
            </div>

        </ItemTemplate>
        <LoadingTemplate>
            <div>Loading...</div>
        </LoadingTemplate>
    </InfiniteScrolling>
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The list of toast messages to display (Components)
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    private async Task<IEnumerable<ModulePresentationModel>> GetItemsAsync(InfiniteScrollingItemsProviderRequest request)
    {
        ResultModel<IEnumerable<ModuleModel>> modulesResult = await ModuleService.GetModulesAsync();

        if (!modulesResult.Success)
        {
            Logger.LogError(
                "Requesting the modules failed with status code {code}.\n{msg}",
                modulesResult.Code,
                modulesResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Chargement des modules",
                $"Le chargement des modules a échoué.\n{modulesResult.Message}",
                false
            );

            return Enumerable.Empty<ModulePresentationModel>();
        }

        if (modulesResult.Data is null)
        {
            Logger.LogError(
                "The modules request succeded but the data is null.\n{msg}",
                modulesResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Chargement des modules",
                $"Le chargement des modules a réussi mais aucune donnée n'a été retourné.\n{modulesResult.Message}",
                false
            );

            return Enumerable.Empty<ModulePresentationModel>();
        }

        IEnumerable<ModuleModel> modulesFromRepo = modulesResult.Data;

        if (modulesFromRepo.Count() == 0)
        {
            return Enumerable.Empty<ModulePresentationModel>();
        }

        if (request.StartIndex >= modulesFromRepo.Count())
        {
            return Enumerable.Empty<ModulePresentationModel>();
        }

        try
        {
            modulesFromRepo = modulesFromRepo.ToList().GetRange(request.StartIndex,
               modulesFromRepo.Count() - request.StartIndex > 20
               ? 20
               : modulesFromRepo.Count());

            var modules = Mapper.Map<IEnumerable<ModulePresentationModel>>(modulesFromRepo);

            return modules;
        }
        catch (ArgumentOutOfRangeException e)
        {
            Logger.LogError($"{DateTime.Now} - One of the argument is out of range.\n{e.Message}\n{e.StackTrace}");
            return Enumerable.Empty<ModulePresentationModel>();
        }
        catch (Exception e)
        {
            Logger.LogError($"{DateTime.Now} - An exception was thrown when trying to load the rest of the data.\n" +
                $"{e.Message}\n{e.StackTrace}");

            return Enumerable.Empty<ModulePresentationModel>();
        }
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
