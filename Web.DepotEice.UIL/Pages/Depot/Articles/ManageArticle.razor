@page "/depot/manage-article/{ArticleId:int?}"

@using AutoMapper;
@using Blazored.LocalStorage;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models.Forms;

@inject ILogger<ManageArticle> Logger;
@inject IArticleService ArticleService;
@inject IMapper Mapper;
@inject ILocalStorageService LocalStorageService;
@inject UserManager UserManager;
@inject IFileService FileService;
@inject NavigationManager NavigationManager;

<PageTitle>
    EICE - @(string.IsNullOrEmpty(Article.Title) ? "Rédaction d'un article" : Article.Title)
</PageTitle>

<Authorize Role="@UserManager.DIRECTION_ROLE">
    <Authorized>
        <h2 class="text-center my-5">Article du blog</h2>

        <div class="mb-3">

            @if (Article.MainImageId.HasValue)
            {
                <img class="img-fluid mb-3" src="@($"{ApiBaseAddress}/Files/ById/{Article.MainImageId}")"
                     alt="Article illustration" style="object-fit: fill;" />
            }

            <InputFile class="form-control" OnChange="OnFileChanged" />
        </div>

        <EditForm Model="Article" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="row border-bottom">
                <div class="mb-3">
                    <label class="form-label">Titre</label>
                    <InputText class="form-control" @bind-Value="Article.Title" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Epingler l'article</label>
                    <InputCheckbox @bind-Value="Article.Pinned">Epingler l'article'</InputCheckbox>
                </div>
            </div>

            <div class="row my-3">

                <RadzenHtmlEditor @bind-Value=@Article.Body style="height: 300px;" UploadUrl="@($"{ApiBaseAddress}/Files/Article")"
                                  Culture="System.Globalization.CultureInfo.CurrentUICulture" UploadHeaders="@Headers">

                </RadzenHtmlEditor>


            </div>

            <button type="submit" class="btn btn-outline-primary">Enregistrer</button>
        </EditForm>
    </Authorized>

    <Unauthorized>

    </Unauthorized>
</Authorize>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    [Inject]
    PreloadService? PreloadService { get; set; }

    [Parameter]
    public int? ArticleId { get; set; }

    public Dictionary<string, string> Headers { get; private set; } = new Dictionary<string, string>();

    public ArticleForm Article { get; private set; } = new();

    public List<ToastMessage> ToastMessages { get; private set; } = new();

#if DEBUG
    private string ApiBaseAddress = "https://localhost:7205/api";
#else
    private string ApiBaseAddress = "https://api-depot-eice.azurewebsites.net/api";
#endif

    public string GetFileRoute { get; private set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        string? token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/login");

            return;
        }

        Headers.Add("Authorization", $"Bearer {token}");

        if (ArticleId is not null)
        {
            var result = await ArticleService.GetArticleAsync(ArticleId.Value);

            if (!result.Success)
            {
                Logger.LogError($"The request has failed with status code \"{result.Code}\".\n{result.Message}");

                return;
            }

            if (result.Data is null)
            {
                Logger.LogError($"The data returned by the request is null.\n{result.Message}");

                return;
            }

            ArticleModel? articleFromRepo = result.Data;

            if (articleFromRepo is not null)
            {
                Article = Mapper.Map<ArticleForm>(articleFromRepo);
            }
        }
    }

    /// <summary>
    /// Event handler on file changed
    /// </summary>
    /// <param name="args"></param>
    private async void OnFileChanged(InputFileChangeEventArgs args)
    {
        PreloadService?.Show();

        IBrowserFile file = args.File;

        if (args.File.ContentType is not "image/jpeg" and not "image/png" and not "image/jpg" and not "image/gif")
        {
            PreloadService?.Hide();

            ShowMessage(ToastType.Warning, "Format de fichier non supporté", "Le format de fichier n'est pas supporté.", false);

            return;
        }

        if (file.Size > 1024 * 1024 * 15)
        {
            PreloadService?.Hide();

            ShowMessage(
                ToastType.Warning,
                "Fichier trop volumineux",
                "Le fichier est trop volumineux. La taille maximale est de 15MB",
                false);

            return;
        }

        string fileName = file.Name;
        string contentType = file.ContentType;
        Stream stream = file.OpenReadStream(file.Size);

        ResultModel<IEnumerable<int>?> result = await FileService.UploadFileAsync(fileName, contentType, stream);

        if (!result.Success)
        {
            PreloadService?.Hide();

            ShowMessage(
                ToastType.Danger,
                "Erreur lors de l'upload",
                $"Une erreur est survenue lors de l'upload de l'image. Veuillez réessayer.\n{result.Message}",
                false);

            return;
        }

        if (result.Data is null)
        {
            PreloadService?.Hide();

            ShowMessage(
                ToastType.Danger,
                "Erreur lors de l'upload",
                $"L'image ne peut pas être récupérée. Veuillez réessayer.\n{result.Message}",
                false);

            return;
        }

        Article.MainImageId = result.Data.SingleOrDefault();

        ShowMessage(ToastType.Info, fileName, "L'image a été sauvegardée avec succès", true);

        PreloadService?.Hide();

        StateHasChanged();
    }

    // TODO : Update when ID is provided
    public async Task HandleValidSubmit()
    {
        if (!await ArticleService.CanPinArticleAsync())
        {
            ShowMessage(ToastType.Warning, "Épingler", "Trop d'articles sont épinglés, veuillez désépingler un article " +
                $"avant d'appliquer la modification sur celui-ci", true);

            return;
        }

        ArticleCreateModel articleModel = Mapper.Map<ArticleCreateModel>(Article);

        try
        {
            if (ArticleId is null)
            {
                var result = await ArticleService.CreateArticleAsync(articleModel);

                if (!result.Success)
                {
                    Logger.LogError($"The article creation failed with status code \"{result.Success}\".\n{result.Message}");

                    ShowMessage(
                        ToastType.Danger,
                        "Échec de la création",
                        $"La création de l'article a échoué.\n{result.Message}",
                        false);

                    return;
                }

                if (result.Data is null)
                {
                    Logger.LogError($"The article creation succeeded but the data is null.\n{result.Message}");

                    ShowMessage(
                        ToastType.Danger,
                        "Erreur",
                        "L'article a été crée mais n'a pas pu être récupéré depuis le serveur. Veuillez recharger la page",
                        true);

                    return;
                }

                ArticleModel article = result.Data;

                ShowMessage(
                    ToastType.Success,
                    "Succès",
                    $"\"{article.Title}\" a été crée avec succès",
                    true);

                NavigationManager.NavigateTo($"/depot/manage-article/{article.Id}");
            }
            else
            {
                ArticleModel? result = await ArticleService.UpdateArticleAsync(ArticleId.Value, articleModel);

                if (result is null)
                {
                    Logger.LogError($"{DateTime.Now} - Article with ID \"{ArticleId}\" couldn't be updated");
                }
            }
        }
        catch (Exception e)
        {
            Logger.LogError($"{DateTime.Now} - {e.Message}");
        }
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
