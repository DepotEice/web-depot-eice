@page "/Profile/Addresses"
@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Models.Forms;

@inject ILogger<Addresses> Logger;
@inject IMapper Mapper;
@inject IAddressService AddressService;

<h2 class="text-center my-5">Adresses</h2>

<div class="mb-3 d-flex justify-content-lg-end">
    <button class="btn btn-outline-primary" @onclick="AddAddress">Ajouter</button>
</div>

@for (int i = 0; i < _addresses.Count; i++)
{
    AddressModel address = _addresses[i];

    <EditForm class="border border-1 p-3 my-3" Model="address" style="border-radius: 10px;">
        <div class="d-flex justify-content-end">
            <button class="btn btn-outline-secondary float-end" @onclick="() => DeleteAddress(i)">
                X
            </button>
        </div>
        <div class="mb-3">
            <label for="street" class="form-label">
                Rue
            </label>
            <InputText id="street" class="form-control" aria-describedby="street" @bind-Value="address.Street" />
            <ValidationMessage class="text-danger" For="(() => address.Street)"></ValidationMessage>
        </div>

        <div class="mb-3 d-flex flex-lg-row justify-content-between">
            <div class="me-1 col-lg">
                <label for="houseNumber" class="form-label">
                    Numéro
                </label>
                <InputText id="houseNumber" class="form-control" aria-describedby="houseNumber"
                       @bind-Value="address.HouseNumber" />
                <ValidationMessage class="text-danger" For="(() => address.HouseNumber)"></ValidationMessage>
            </div>

            <div class="ms-1 col-lg">
                <label for="appartment" class="form-label" aria-describedby="appartment">
                    Appartement (optionel)
                </label>
                <InputText id="appartment" class="form-control" aria-describedby="appartment"
                       @bind-Value="address.Appartment" />
                <ValidationMessage class="text-danger" For="(() => address.Appartment)"></ValidationMessage>
            </div>
        </div>

        <div class="mb-3 d-flex flex-lg-row justify-content-between">
            <div class="me-1 col-lg-3">
                <label for="zipCode" class="form-label">
                    Code postal
                </label>
                <InputText id="zipCode" class="form-control" aria-describedby="zipCode"
                       @bind-Value="address.Zipcode" />
                <ValidationMessage class="text-danger" For="(() => address.Zipcode)"></ValidationMessage>
            </div>

            <div class="ms-1 col-lg">
                <label for="city" class="form-label">
                    Ville
                </label>
                <InputText id="city" class="form-control" aria-describedby="city" @bind-Value="address.City" />
                <ValidationMessage class="text-danger" For="(() => address.City)"></ValidationMessage>
            </div>
        </div>

        <div class="mb-3">
            <label for="country" class="form-label">
                Pays
            </label>
            <InputText id="country" class="form-control" aria-describedby="country" @bind-Value="address.Country" />
            <ValidationMessage class="text-danger" For="(() => address.Country)"></ValidationMessage>
        </div>

        <div class="mb-3">
            <InputCheckbox id="isPrimary" @bind-Value="address.IsPrimary" placeholder="Adresse principale" />
            <label for="isPrimary" class="form-label">
                Adresse principale
            </label>
        </div>
    </EditForm>
}

@foreach (AddressModel address in _addresses)
{

}



@code {
    private List<AddressModel> _addresses = new List<AddressModel>();

    protected override async Task OnInitializedAsync()
    {
        _addresses = (await AddressService.GetAddresses()).ToList();
    }

    private void AddAddress()
    {
        _addresses.Add(new AddressModel());
    }

    private void DeleteAddress(int index)
    {
        _addresses.RemoveAt(index);
    }
}
