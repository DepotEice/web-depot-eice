@page "/depot/schedules"
@page "/depot/"

@using AutoMapper;
@using Syncfusion.Blazor.Schedule
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models;

@inject ILogger<Schedules> Logger;
@inject IMapper Mapper;
@inject IModuleService ModuleService;
@inject UserManager UserManager;
@inject IUserService UserService;

<h3 class="text-center my-5">Calendrier</h3>

<div class="container">

   @*  <SfSchedule TValue="ScheduleDisplayModel" @bind-SelectedDate="_curentDate" StartHour="07:00">
        <ScheduleEvents TValue="ScheduleDisplayModel" OnPopupOpen="@OnPopupOpen"></ScheduleEvents>
        <ScheduleQuickInfoTemplates>
            <HeaderTemplate>
                <h4 class="text-center my-3">@((context as ScheduleModel)?.ModuleName)</h4>
            </HeaderTemplate>

            <ContentTemplate>
                <div class="container">
                    <div class="row mb-2">
                        <label class="form-label">Intitulé</label>
                        <input class="form-control" value="@((context as ScheduleModel)?.Title)" disabled />
                    </div>

                    <div class="row mb-2">
                        <label class="form-label">Détails</label>
                        <textarea class="form-control" style="height:12rem" disabled>
                            @((context as ScheduleModel)?.Details)
                        </textarea>
                    </div>
                </div>
            </ContentTemplate>

            <FooterTemplate>
                <div class="row my-1">
                    <NavLink class="float-end" href="@((context as ScheduleModel).ScheduleDetailsUrl)">
                        Plus de détails
                    </NavLink>
                </div>
            </FooterTemplate>

        </ScheduleQuickInfoTemplates>
        <ScheduleTemplates>
            <EditorTemplate>
                <span>blablabla</span>
            </EditorTemplate>
        </ScheduleTemplates>


        <ScheduleEventSettings DataSource="_schedules" AllowEditFollowingEvents="false" AllowEditing="_hasAdminRights"
                               AllowDeleting="_hasAdminRights" AllowAdding="_hasAdminRights" EnableTooltip="true">
            <Template>
                <div class="container">
                    <div class="row text-center">
                        <span class="my-2">
                            @((context as ScheduleModel)?.StartTime.ToString("H:m"))
                            -
                            @((context as ScheduleModel)?.EndTime.ToString("H:m"))
                        </span>

                        <span class="my-2 fw-bold">@((context as ScheduleModel)?.TeacherName)</span>
                        <span class="my-2">@((context as ScheduleModel)?.ModuleName)</span>
                        <span class="my-2">@((context as ScheduleModel)?.Title)</span>
                    </div>
                </div>
            </Template>
        </ScheduleEventSettings>

        <ScheduleView>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
        </ScheduleView>
    </SfSchedule> *@

</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// List of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    private bool _hasAdminRights = false;
    private DateTime _curentDate = DateTime.Now;
    private ScheduleDisplayModel _schedule = new();
    private List<ScheduleDisplayModel> _schedules = new List<ScheduleDisplayModel>();

    protected override async Task OnInitializedAsync()
    {
        _hasAdminRights = (await UserManager.IsInRoleAsync("DIRECTION") || await UserManager.IsInRoleAsync("TEACHER"));

        var schedulesFromRepo = await ModuleService.GetSchedulesAsync();

        foreach (var schedule in schedulesFromRepo)
        {
            Logger.LogInformation($"{schedule}");

            UIL.Models.ScheduleDisplayModel scheduleModel = Mapper.Map<UIL.Models.ScheduleDisplayModel>(schedule);

            ResultModel<ModuleModel> moduleResult = await ModuleService.GetModuleAsync(schedule.ModuleId);

            if (!moduleResult.Success)
            {
                Logger.LogError($"The module request failed with status code \"{moduleResult.Code}\".\n{moduleResult.Message}");

                ShowMessage(
                    ToastType.Danger,
                    "Chargement du module",
                    $"Le chargement du module a échoué.\n{moduleResult.Message}",
                    false
                );

                return;
            }

            if (moduleResult.Data is null)
            {
                Logger.LogError($"The module request succeeded but the data is null.\n{moduleResult.Message}");

                ShowMessage(
                    ToastType.Danger,
                    "Chargement du module",
                    $"Le chargement du module est réussi mais les données retournées sont null.\n{moduleResult.Data}",
                    false
                );

                return;
            }

            ModuleModel module = moduleResult.Data;

            var userResult = await UserService.GetUserAsync(module.TeacherId);

            if (!userResult.Success)
            {
                Logger.LogError($"The request of the user has failed with status code \"{userResult.Code}\".\n{userResult.Message}");

                return;
            }

            if (userResult.Data is null)
            {
                Logger.LogError($"The requested user data is null.\n{userResult.Message}");

                return;
            }

            var user = userResult.Data;

            if (user is not null)
            {
                scheduleModel.TeacherName = $"{user.LastName.ToUpper()} {user.FirstName}";
            }

            scheduleModel.ModuleName = module.Name;

            Logger.LogInformation($"{scheduleModel.StartTime} {scheduleModel.EndTime}");

            _schedules.Add(scheduleModel);
        }

        // TODO : Retrieve the schedules
        //  1. Get Schedules to which the user is subscribed
    }

    public void OnPopupOpen(PopupOpenEventArgs<ScheduleModel> args)
    {
        if (args.Type == PopupType.Editor)
        {
            args.Cancel = true;
        }
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
