@page "/depot/schedules"
@page "/depot/"

@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models;
@using static Web.DepotEice.UIL.Helpers.Utils;

@inject ILogger<Schedules> Logger;
@inject IMapper Mapper;
@inject IModuleService ModuleService;
@inject IUserService UserService;
@inject UserManager UserManager;
@inject ScheduleManager ScheduleManager;
@inject NavigationManager NavigationManager;

<h3 class="text-center my-md-5">Calendrier</h3>

<div class="container">

    <div class="">
        <div class="mb-3">
            <label class="form-label" for="modules-select">Module</label>
            <select class="form-select">
                <option>test</option>
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label" for="selected-date">Date</label>
            <RadzenDatePicker TValue="DateTime" Value="SelectedDateTime" Inline="true" id="selected-date"
                              class="form-control" Change="OnSelectedDateTimeChanged" />
        </div>
    </div>

    <RadzenScheduler @ref="@Scheduler" style="height: 50rem;" SlotRender="OnSlotRender" LoadData="OnDataLoaded"
                     TItem="ScheduleDisplayModel" Data="SchedulesList" StartProperty="StartTime"
                     EndProperty="EndTime" TextProperty="ModuleName" SelectedIndex="(int)SelectedDateRange"
                     AppointmentRender="OnAppointmentRender" Culture="System.Globalization.CultureInfo.CurrentCulture"
                     TodayText="Aujourd'hui" AppointmentSelect="OnAppointmentSelected">

        <Template>
            <div class="row">
                <span class="fs-6 fw-bold mb-2">@context.ModuleName</span>
                <span class="fst-italic mb-2">@context.Title</span>
                <span>@context.Details</span>
            </div>
        </Template>

        <ChildContent>
            <RadzenDayView StartTime="new TimeSpan(7,0,0)" EndTime="new TimeSpan(23,0,0)" Text="Jour" TimeFormat="HH:mm" />
            <RadzenWeekView StartTime="new TimeSpan(7,0,0)" EndTime="new TimeSpan(23,0,0)" Text="Semaine" TimeFormat="HH:mm" />
            <RadzenMonthView Text="Mois" />
        </ChildContent>

    </RadzenScheduler>

</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The Radzen Scheduler reference
    /// </summary>
    public RadzenScheduler<ScheduleDisplayModel> Scheduler { get; set; } = new();

    /// <summary>
    /// List of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    /// <summary>
    /// The selected date range
    /// </summary>
    public DateRange SelectedDateRange { get; set; } = DateRange.Week;

    /// <summary>
    /// Selected date time
    /// </summary>
    public DateTime SelectedDateTime { get; private set; } = DateTime.Now;

    /// <summary>
    /// The list of appointments
    /// </summary>
    public IEnumerable<ScheduleDisplayModel> SchedulesList { get; private set; } = new List<ScheduleDisplayModel>();

    /// <summary>
    /// Initialization of the component
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await LoadSchedulesAsync();
    }

    private async Task LoadSchedulesAsync()
    {
        SchedulesList = await ScheduleManager.GetSchedulesAsync(SelectedDateTime, SelectedDateRange);
    }

    private void OnSelectedDateTimeChanged(DateTime? value)
    {
        if (value.HasValue)
        {
            if (SelectedDateRange == DateRange.Month)
            {
                DateTime currentDate = Scheduler.CurrentDate;
                Scheduler.CurrentDate = new DateTime(value.Value.Year, value.Value.Month, currentDate.Day);
            }
            else
            {
                Scheduler.CurrentDate = value.Value;
            }

            Scheduler.Reload();
        }
    }

    /// <summary>
    /// Event handler <see cref="RadzenScheduler{TItem}.SlotRender"/>se when the Slots are rendered
    /// </summary>
    /// <param name="args"></param>
    private void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Mois" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Semaine" || args.View.Text == "Jour") && args.Start.Hour >= 8 && args.Start.Hour < 22)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        switch (args.View.Text)
        {
            case "Jour":
                SelectedDateRange = DateRange.Day;
                break;
            case "Semaine":
                SelectedDateRange = DateRange.Week;
                break;
            case "Mois":
                SelectedDateRange = DateRange.Month;
                break;
            default:
                Logger.LogError("The view text value doesn't exist");
                break;
        }
    }

    /// <summary>
    /// Event handler <see cref="RadzenScheduler{TItem}.LoadData"> when the data is loaded
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnDataLoaded(SchedulerLoadDataEventArgs args)
    {
        SelectedDateTime = args.Start;

        await LoadSchedulesAsync();
    }

    /// <summary>
    /// Event handler <see cref="RadzenScheduler{TItem}.AppointmentRender"/>se when the Appointments are rendered
    /// </summary>
    /// <param name="args"></param>
    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<ScheduleDisplayModel> args)
    {
        args.Attributes["style"] = $"background: {args.Data.RGBColor}";
    }

    private void OnAppointmentSelected(SchedulerAppointmentSelectEventArgs<ScheduleDisplayModel> args)
    {
        NavigationManager.NavigateTo($"/depot/schedules/{args.Data.Id}/details");
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
