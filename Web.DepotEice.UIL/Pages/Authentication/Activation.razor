@page "/activation"

@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers

@inject ILogger<Activation> Logger;
@inject UserManager UserManager;
@inject DialogService DialogService;
@inject IAuthService AuthService;

<h3 class="text-center my-5">@ActivationResult</h3>

<p class="text-center">
    Cliquez <NavLink href="/login">ici</NavLink> pour vous connecter
</p>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The id of the user requesting the activation
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(TokenId))]
    public string TokenId { get; set; } = string.Empty;

    /// <summary>
    /// The user token to activate the account
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(TokenValue))]
    public string TokenValue { get; set; } = string.Empty;

    /// <summary>
    /// The list of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; private set; } = new();

    /// <summary>
    /// The activation result message
    /// </summary>
    public string ActivationResult { get; private set; } = string.Empty;

    /// <summary>
    /// Initialization of the component
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ResultModel<bool> result = await AuthService.ActivateAsync(TokenId, TokenValue);

            if (!result.Success || !result.Data)
            {
                Logger.LogError(
                    "The activation of the account failed with status code {code} following message:\n{msg}",
                    result.Code,
                    result.Message
                );

                ShowMessage(
                    ToastType.Danger,
                    "Erreur",
                    "L'activation a échouée, veuillez réessayer ultérieurement ou contacter l'administrateur",
                    false
                );

                ActivationResult =
                    $"L'activation a échouée. Le jeton est invalide ou le lien a expiré." +
                    $"Veuillez réessayer ultérieurement ou contacter l'administrateur";

                return;
            }

            Logger.LogInformation(
                "Activation was successful with statuc code {code} and message:\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Success,
                "Succès",
                "Votre compte a correctement été activé",
                true
            );

            ActivationResult = $"Votre compte a correctement été activé";
        }
        catch (Exception e)
        {
            Logger.LogError(e.Message);

            ActivationResult = $"Une erreur est survenue lors de l'activation de votre compte.\n{e.Message}";
        }
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
