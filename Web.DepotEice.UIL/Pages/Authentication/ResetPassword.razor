@page "/reset-password"

@using AutoMapper
@using Web.DepotEice.BLL.IServices
@using Web.DepotEice.BLL.Models
@using Web.DepotEice.UIL.Models.Forms

@inject ILogger<ResetPassword> Logger;
@inject IUserTokenService UserTokenService;
@inject IAuthService AuthService;
@inject IMapper Mapper;
@inject NavigationManager NavigationManager;

<PageTitle>Changer de mot de passe</PageTitle>

<h3 class="text-center my-5">Créer un nouveau mot de passe</h3>

<div class="container my-5 py-5 bg-light border border-1">
    <div class="d-flex align-items-center justify-content-center mt-2">

        @if (TokenIsValid)
        {
            <PasswordUpdate UpdatePassword="ResetPasswordForm" OnFormExecuted="OnValidSubmit" />
        }
        else
        {
            <h4 class"text-center my-5">Le lien n'est plus valide ou a expiré</h4>
        }

    </div>
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The preload service
    /// </summary>
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// The user id requesting the password reset
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(UserId))]
    public string UserId { get; set; } = string.Empty;

    /// <summary>
    /// The user token to reset the password
    /// </summary>
    [Parameter]
    [SupplyParameterFromQuery(Name = nameof(Token))]
    public string Token { get; set; } = string.Empty;

    /// <summary>
    /// The list of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; private set; } = new();

    /// <summary>
    /// The form to reset the password
    /// </summary>
    public ResetPasswordForm ResetPasswordForm { get; private set; } = new();

    /// <summary>
    /// Value indicating whether the token is valid or not
    /// </summary>
    public bool TokenIsValid { get; private set; } = false;

    /// <summary>
    /// Initialization of the component
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService?.Show();

            ResultModel<bool> result = await UserTokenService.IsValidAsync(Token);

            if (!result.Success || !result.Data)
            {
                Logger.LogError(
                    "The token confirmation failed with status code {code} following message:\n{msg}",
                    result.Code,
                    result.Message
                );

                ShowMessage(
                    ToastType.Danger,
                    "Erreur",
                    "Le lien n'est plus valide ou a expiré",
                    false
                );
            }

            TokenIsValid = result.Data;

            ShowMessage(
                ToastType.Secondary,
                "Information",
                "Le lien est valide",
                false
            );

            PreloadService?.Hide();
        }
        catch (Exception e)
        {
            Logger.LogError(
                "An exception was thrown when validating the token.\n{eMsg}\n{eStr}",
                e.Message,
                e.StackTrace
            );

            ShowMessage(
                ToastType.Danger,
                "Exception",
                $"Une erreur est survenue lors de la validation du jeton\n{e.Message}",
                false
            );

            PreloadService?.Hide();
        }
    }

    /// <summary>
    /// Event handler executed when the form is valid and submitted
    /// </summary>
    /// <returns></returns>
    public async Task OnValidSubmit()
    {
        PreloadService?.Show();

        if (!TokenIsValid)
        {
            Logger.LogError("User tried to reset password with invalid token");

            ShowMessage(
                ToastType.Warning,
                "Action restrainte",
                "Vous ne pouvez pas changer le mot de passe, le jeton est invalide.",
                false
            );

            PreloadService?.Hide();

            return;
        }

        PasswordResetModel passwordUpdate = Mapper.Map<PasswordResetModel>(ResetPasswordForm);
        passwordUpdate.UserId = UserId;

        ResultModel<bool> result = await AuthService.ResetPasswordAsync(passwordUpdate, Token);

        if (!result.Success || !result.Data)
        {
            Logger.LogError(
                "The password update failed with status code {code} following message:\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Erreur",
                "La mise à jour du mot de passe a échouée, veuillez réessayer ultérieurement ou contacter l'administrateur",
                false
            );

            PreloadService?.Hide();

            return;
        }

        ShowMessage(
            ToastType.Success,
            "Succès",
            "Votre mot de passe a correctement été mis à jour. Vous allez être redirigé",
            true
        );

        PreloadService?.Hide();

        NavigationManager.NavigateTo("/login");
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
