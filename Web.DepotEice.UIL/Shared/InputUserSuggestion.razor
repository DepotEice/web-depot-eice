@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Helpers;

@inject IUserService UserService;
@inject ILogger<InputUserSuggestion> Logger;

<div class="autocomplete">
    <InputText @bind-Value="Value" @oninput="FilterAvailableUsers" @onfocusin="OnFocusIn"
               class="form-control" list="datalistOptions" id="exampleDataList"
               placeholder="Type to search..." />

    @if (DisplaySuggestions)
    {
        <div class="suggestions border border-1">
            @if (AvailableUsers is not null && AvailableUsers.Count() > 0)
            {
                foreach (var user in AvailableUsers)
                {
                    <div class="suggestions-item d-flex align-items-center p-2" @onclick="() => OnUserClicked(user)">
                        @if (user.ProfilePictureUrl is null)
                        {
                            <img class="item-img" alt="user img"
                            src="@($"{Utils.API_BASE_URL}Files/DefaultProfilePicture")" />
                        }
                        else
                        {
                            <img class="item-img" alt="user img"
                                 src="@($"{Utils.API_BASE_URL}{user.ProfilePictureUrl}")" />
                        }

                        <span class="fs-4">@user.LastName @user.FirstName</span>
                    </div>
                }
            }
            else
            {
                <span class="fs-4 fst-italic p-2">Aucunes suggestions</span>
            }
        </div>
    }

</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The value of the search input
    /// </summary>
    [Parameter]
    public string Value { get; set; } = string.Empty;

    /// <summary>
    /// The event callback executed when a user is selected in the suggestions
    /// </summary>
    [Parameter]
    public EventCallback<UserModel> OnUserSelected { get; set; }

    /// <summary>
    /// The list of Toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; private set; } = new();

    /// <summary>
    /// The list of available users
    /// </summary>
    public IEnumerable<UserModel> AvailableUsers { get; private set; } = Enumerable.Empty<UserModel>();

    /// <summary>
    /// The state of the suggestions display
    /// </summary>
    public bool DisplaySuggestions { get; private set; } = false;

    /// <summary>
    /// Load all the available users from the API
    /// </summary>
    /// <returns></returns>
    private async Task LoadUsersAsync()
    {
        ResultModel<IEnumerable<UserModel>> result = await UserService.GetUsersAsync();

        if (!result.Success)
        {
            Logger.LogError(
                "Requesting the users failed with status code {code}.\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Échec de la récupération",
                $"Le chargement des utilisateurs a échoué.\n{result.Message}",
                false
            );

            return;
        }

        if (result.Data is null)
        {
            Logger.LogError(
                "Requesting the users succeeded but the returned data is null.\n{msg}",
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Échec de la récupération",
                $"La requête est réussi mais les données retournées sont null.\n{result.Message}",
                false
            );

            return;
        }

        AvailableUsers = result.Data;

        Logger.LogInformation($"{AvailableUsers.Count()} users loaded");

        StateHasChanged();
    }

    /// <summary>
    /// Event handler triggered when user get focus in the search input
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnFocusIn(FocusEventArgs args)
    {
        DisplaySuggestions = true;

        await LoadUsersAsync();

        if (!string.IsNullOrEmpty(Value))
        {
            AvailableUsers = AvailableUsers
                .Where(u =>
                    u.FirstName.Contains(Value, StringComparison.InvariantCultureIgnoreCase) ||
                    u.LastName.Contains(Value, StringComparison.InvariantCultureIgnoreCase)
                );
        }
    }

    /// <summary>
    /// Event handler triggered when user leave the focus of the search input
    /// </summary>
    /// <param name="args"></param>
    private void OnFocusOut(FocusEventArgs args)
    {
        DisplaySuggestions = false;
    }

    /// <summary>
    /// Event handler triggered when something in the search input changes
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task FilterAvailableUsers(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        string? newValue = args.Value as string;

        if (string.IsNullOrEmpty(newValue))
        {
            await LoadUsersAsync();
        }
        else
        {
            AvailableUsers = AvailableUsers
                .Where(u =>
                    u.FirstName.Contains(newValue, StringComparison.InvariantCultureIgnoreCase) ||
                    u.LastName.Contains(newValue, StringComparison.InvariantCultureIgnoreCase)
                );
        }

        StateHasChanged();
    }

    /// <summary>
    /// Event handler executed when the user click on one the suggestion
    /// </summary>
    /// <param name="user"></param>
    /// <returns></returns>
    private async Task OnUserClicked(UserModel user)
    {
        await OnUserSelected.InvokeAsync(user);
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
