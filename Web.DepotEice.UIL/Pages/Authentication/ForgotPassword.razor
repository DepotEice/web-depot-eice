@page "/forgot-password"

@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers
@using Web.DepotEice.UIL.Models.Forms

@inject ILogger<ForgotPassword> Logger;
@inject IAuthService AuthService;
@inject NavigationManager NavigationManager;

<PageTitle>Mot de passe oublié</PageTitle>

<h2 class="text-center my-5">Mot de passe oublié</h2>

<div class="container my-5 py-5 bg-light border border-1">
    <div class="d-flex flex-column align-items-center justify-content-center mt-2">
        <EditForm class="mt-3" Model="@ForgotPasswordForm" OnValidSubmit="@OnValidationSubmit" style="width: 50%">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="mb-3">
                <label for="email" class="form-label">Adresse Email</label>

                <InputText @bind-Value="ForgotPasswordForm.Email" type="email" class="form-control" id="email"
                           aria-describedby="aide email" />

                <ValidationMessage class="text-danger" For="@(() => ForgotPasswordForm.Email)" />

                <div id="email-helper" class="form-text">
                    Votre adresse email est privé et ne sera partagée avec personne. Pour plus d'informations,
                    consultez notre <a href="#">politique de confidentialité</a>
                </div>
            </div>
            <div class="mb-3">
                <button type="submit" class="btn btn-outline-primary mx-auto">
                    Envoyer le mail
                </button>
            </div>
            <div class="mb-3">
                Pour vous connecter, revenez sur la page de <NavLink class="" href="login">connexion</NavLink>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(ValidationMessage))
        {
            @if (Success)
            {
                <div class="" style="width: 50%">
                    <Alert Color="AlertColor.Success">
                        <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                        @ValidationMessage
                    </Alert>
                </div>
            }
            else
            {
                <div class="" style="width: 50%">
                    <Alert Color="AlertColor.Danger">
                        <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                        @ValidationMessage
                    </Alert>
                </div>
            }
        }
    </div>
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    [Inject]
    public PreloadService? PreloadService { get; private set; }

    /// <summary>
    /// The form to request a new password
    /// </summary>
    public ForgotPasswordForm ForgotPasswordForm { get; private set; } = new();

    /// <summary>
    /// Validation message
    /// </summary>
    public string ValidationMessage { get; private set; } = string.Empty;

    /// <summary>
    /// Specify if the request was successful
    /// </summary>
    public bool Success { get; private set; } = false;

    /// <summary>
    /// The list of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; private set; } = new();

    /// <summary>
    /// Event handler triggered when the form is valid and submitted
    /// </summary>
    /// <returns></returns>
    public async Task OnValidationSubmit()
    {
        PreloadService?.Show();

        try
        {
            ResultModel<bool> result = await AuthService.RequestPasswordAsync(ForgotPasswordForm.Email);

            if (!result.Success || !result.Data)
            {
                Logger.LogError(
                    "The password request failed with status code {code} following message:\n{msg}",
                    result.Code,
                    result.Message
                );

                ShowMessage(
                    ToastType.Danger,
                    "Erreur",
                    "La demande de réinitialisation du mot de passe a échoué",
                    true
                );

                ValidationMessage = "Une erreur est survenue, l'adresse email n'est associée à aucun compte";

                PreloadService?.Hide();

                return;
            }

            ShowMessage(
                ToastType.Success,
                "Succès",
                "Un email a été envoyé, vérifiez votre boite mail",
                true
            );

            ValidationMessage = "Un email a été envoyé, vérifiez votre boite mail";

            Success = result.Data;

            StateHasChanged();
        }
        catch (Exception e)
        {
            Logger.LogError(
                "An exception was thrown while requesting a new password:\n{eMsg}\n{eStr}",
                e.Message,
                e.StackTrace
            );

            ValidationMessage = "Une erreur est survenue, veuillez réessayer ultérieurement";

            ShowMessage(
               ToastType.Warning,
                "Erreur",
                "Une erreur est survenue lors de la réinitialisation du mot de passe",
                true
            );
        }

        PreloadService?.Hide();
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
