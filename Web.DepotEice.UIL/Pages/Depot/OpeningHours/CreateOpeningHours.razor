@page "/depot/createOpeningHours"

@using Web.DepotEice.BLL.IServices
@using Web.DepotEice.BLL.Models
@using Web.DepotEice.Helpers
@using Web.DepotEice.UIL.Models.Forms
@using Web.DepotEice.UIL.ViewModels

@inject ILogger<CreateOpeningHours> Logger;
@inject IOpeningHoursService OpeningHoursService;

<h3 class="text-center my-5">Gérer les heures d'ouvertures</h3>

<div class="container">

    <EditForm Model="viewModel" OnValidSubmit="SubmitForm">

        <div class="row border-bottom pb-3">
            <div class="mb-3">
                <label class="form-label">Date du premier jour d'ouverture</label>
                <InputDate class="form-control" @bind-Value="viewModel.StartDate" />
            </div>
            <div class="mb-3">
                <label for="" class="form-label">Date du dernier jour d'ouverture</label>
                <InputDate class="form-control" @bind-Value="viewModel.EndDate" />
            </div>
        </div>

        <div class="d-lg-inline-flex w-100 my-4 pb-3 border-bottom">

            @foreach (var item in viewModel.DayTimeSelectors)
            {
                <div class="col-lg-2 mb-4">
                    <DayTimeSelector DayTimeSelectorModel="item" />
                </div>
            }

        </div>

        <div class="my-4 border-bottom">
            <div class="row border-bottom pb-3">
                <div class="col-10 ">
                    <h4 class="text-center align-bottom">Fermeture exceptionnelle</h4>
                </div>
                <div class="col-2">
                    <button class="btn btn-outline-secondary float-end" type="button" @onclick="AddExceptionalClose">+</button>
                </div>
            </div>

            @foreach (var item in viewModel.ExceptionalCloses)
            {
                <div class="row my-3">
                    <div class="col-lg-5 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">A partir du :</label>
                            <div class="col-sm-9">
                                <InputDate class="form-control" @bind-Value="item.From" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-5 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">Jusqu'au :</label>
                            <div class="col-sm-9">
                                <InputDate class="form-control" @bind-Value="item.To" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-1 mx-2 my-1">
                        <button class="btn btn-outline-danger" @onclick="@(() => RemoveExceptionalClose(item.Id))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            }

        </div>

        <button class="btn btn-outline-primary float-end">Enregistrer</button>

    </EditForm>
</div>

@code {
    private CreateOpeningHoursViewModel viewModel = new();

    private void AddExceptionalClose()
    {
        viewModel.ExceptionalCloses.Add(new ExceptionalCloseForm(viewModel.ExceptionalCloses.Count));
        Logger.LogInformation($"{viewModel.ExceptionalCloses.Count}");
    }

    private void RemoveExceptionalClose(int id)
    {
        try
        {
            var element = viewModel.ExceptionalCloses.Find(e => e.Id.Equals(id));
            if (element is null)
            {
                Logger.LogWarning("{date} - There is no element in the list with ID \"{id}\"", DateTime.Now, id);
            }
            else
            {
                viewModel.ExceptionalCloses.Remove(element);
            }
        }
        catch (Exception e)
        {
            Logger.LogError("{date} - {exception}", DateTime.Now, e.Message);
        }

    }

    public async Task SubmitForm()
    {
        List<OpeningHoursCreateModel> openingHoursToCreate = new List<OpeningHoursCreateModel>();

        foreach (var item in viewModel.DayTimeSelectors)
        {
            Logger.LogInformation("{item}", item);
        }


        for (DateTime dti = viewModel.StartDate; dti <= viewModel.EndDate; dti = dti.AddDays(1))
        {
            var daySelector = viewModel.DayTimeSelectors
            .FirstOrDefault(dts => dts.IsSelected && dts.DayOfWeek == (DaysOfTheWeekFr)dti.DayOfWeek);

            bool isExceptionalyClosed = viewModel.ExceptionalCloses.Any(e => dti >= e.From && dti <= e.To);

            if (daySelector is not null && !isExceptionalyClosed)
            {
                openingHoursToCreate.Add(new OpeningHoursCreateModel()
                    {
                        OpenAt = new DateTime(
                                    dti.Year,
                                    dti.Month,
                                    dti.Day,
                                    daySelector.From.Hour,
                                    daySelector.From.Minute,
                                    0),
                        CloseAt = new DateTime(
                                    dti.Year,
                                    dti.Month,
                                    dti.Day,
                                    daySelector.To.Hour,
                                    daySelector.To.Minute,
                                    0)
                    });
            }
        }

        foreach (var openingHours in openingHoursToCreate)
        {
            try
            {
                var createdOpeningHours = await OpeningHoursService.CreateOpeningHoursAsync(openingHours);

                if (createdOpeningHours is null)
                {
                    Logger.LogError("{date} - Creating opening hours for \"{dateFrom}\" failed",
                        DateTime.Now, openingHours.OpenAt);
                }

                Logger.LogInformation("{date} - OpeningHours in the list start from \"{start}\" to \"{end}\"",
                    DateTime.Now, openingHours.OpenAt, openingHours.CloseAt);
            }
            catch (Exception e)
            {
                Logger.LogError("{date} - {exception}", DateTime.Now, e.Message);
            }
        }

        Logger.LogInformation("Form submitted");
    }


}
