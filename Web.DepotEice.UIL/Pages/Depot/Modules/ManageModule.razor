@page "/depot/manage-module/{Id:int?}"

@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.Helpers;
@using Web.DepotEice.UIL.Helpers;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models.Forms;
@using Web.DepotEice.UIL.Models;

@inject ILogger<ManageModule> Logger;
@inject NavigationManager NavigationManager;
@inject IMapper Mapper;
@inject IUserService UserService;
@inject IModuleService ModuleService;
@inject UserManager UserManager;

<PageTitle>EICE - Depot - Gestion de module</PageTitle>

<div class="container">
    <h3 class="text-center">Informations sur le module</h3>
    <EditForm Model="ModuleForm" OnValidSubmit="HandleValidModuleSubmitAsync" class="border-bottom pb-3 mb-5">
        <div class="row mb-3">
            <label for="input-title" class="form-label">Titre</label>
            <InputText @bind-Value="ModuleForm.Title" id="input-title" class="form-control" />
            <ValidationMessage class="text-danger" For="() => ModuleForm.Title" />
        </div>

        <div class="row mb-3">
            <label for="input-description" class="form-label">Description</label>
            <InputTextArea @bind-Value="ModuleForm.Description" id="input-description" class="form-control"
                           style="height: 20rem" />
            <ValidationMessage class="text-danger" For="() => ModuleForm.Description" />
        </div>

        <div class="row mb-3">
            <label for="teacher" class="form-label">Professeur en charge</label>

            <Authorize Role="@UserManager.DIRECTION_ROLE">
                <Authorized>
                    <InputSelect id="teacher" class="form-control" @bind-Value="ModuleForm.TeacherId">
                        <option value=""></option>
                        @foreach (var teacher in Teachers)
                        {
                            <option value="@teacher.Id">@teacher.FullName</option>
                        }
                    </InputSelect>
                </Authorized>
                <Unauthorized>
                    <span id="teacher" class="fw-bold form-control">
                        @Teachers.SingleOrDefault(t => t.Id.Equals(ModuleForm.TeacherId))?.FullName
                    </span>
                </Unauthorized>
            </Authorize>


        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-outline-primary">Enregistrer</button>
        </div>
    </EditForm>

    <Authorize Role="@UserManager.DIRECTION_ROLE">
        <Authorized>
            <div class="my-3">
                <h3 class="text-center">Élèves</h3>

                <div class="d-flex flex-row">
                    <div class="col me-2">
                        <h4 class="text-center">Élèves disponibles</h4>

                        <div class="my-1 d-flex flex-row">
                            <div class="border border-1 d-flex flex-column align-content-start selections-available-students">

                                @if (AvailableUsers is not null && AvailableUsers.Count() > 0)
                                {
                                    foreach (var user in AvailableUsers)
                                    {
                                        <InputCheckbox @bind-Value="user.Selected" id="@($"available-user-{user.Id}")"
                                                       style="display: none;" />

                                        <label for="@($"available-user-{user.Id}")"
                                               class="p-2 border-bottom fw-semibold selection-item @(user.Selected ? "selected": "")">
                                            @user.FullName
                                        </label>
                                    }
                                }
                            </div>

                            <button @onclick="AddStudentsToModule" class="btn btn-outline-secondary"
                                    style="border-radius: 0 0.5rem 0.5rem 0;" disabled="@(!Id.HasValue)">
                                <i class="bi bi-caret-right"></i>
                            </button>
                        </div>
                    </div>

                    <div class="col ms-2">
                        <h4 class="text-center">Élèves inscris</h4>

                        <div class="my-1 d-flex flex-row">
                            <button @onclick="RemoveStudentsFromModule" class="btn btn-outline-secondary"
                                    style="border-radius: 0.5rem 0 0 0.5rem" disabled="@(!Id.HasValue)">
                                <i class="bi bi-caret-left"></i>
                            </button>

                            <div class="border border-1 d-flex flex-column align-content-start selection-registered-students">

                                @if (RegisteredUsers is not null && RegisteredUsers.Count() > 0)
                                {
                                    foreach (var user in RegisteredUsers)
                                    {
                                        <InputCheckbox @bind-Value="user.Selected" id="@($"available-user-{user.Id}")"
                                                       style="display: none;" />

                                        <label for="@($"available-user-{user.Id}")"
                                               class="p-2 border-bottom fw-semibold selection-item @(user.Selected ? "selected": "")">
                                            @user.FullName
                                        </label>
                                    }
                                }
                            </div>
                        </div>

                    </div>
                </div>

            </div>

            <hr />
        </Authorized>
    </Authorize>

    <h3 class="text-center">Horaire du module</h3>

    <EditForm Model="ModuleScheduleForm" OnValidSubmit="HandleValidModuleScheduleSubmitAsync">
        <div class="row mb-3">
            <label class="form-label">Date du premier cours</label>
            <InputDate class="form-control" @bind-Value="ModuleScheduleForm.StartDate" disabled="@(!Id.HasValue)" />
        </div>

        <div class="row mb-3">
            <label class="form-label">Date du dernier cours</label>
            <InputDate class="form-control" @bind-Value="ModuleScheduleForm.EndDate" disabled="@(!Id.HasValue)" />
        </div>

        <div class="d-lg-inline-flex w-100 my-4 pb-3 border-bottom">

            @foreach (var dayTimeSelector in ModuleScheduleForm.DayTimeSelectors)
            {
                <div class="col-lg-2 mb-4">
                    <DayTimeSelector DayTimeSelectorModel="dayTimeSelector" Disabled="@(!Id.HasValue)" />
                </div>
            }

        </div>

        <div class="my-4 border-bottom">
            <div class="row border-bottom pb-3">
                <div class="col-10 ">
                    <h4 class="text-center align-bottom">Fermeture exceptionnelle</h4>
                </div>
                <div class="col-2">
                    <button class="btn btn-outline-secondary float-end" type="button" disabled="@(!Id.HasValue)"
                    @onclick="AddExceptionalClose">
                        +
                    </button>
                </div>
            </div>

            @foreach (var exceptionalClose in ModuleScheduleForm.ExceptionalCloses)
            {
                <div class="row my-3">
                    <div class="col-lg-5 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">A partir du :</label>
                            <div class="col-sm-9">
                                <InputDate class="form-control" @bind-Value="exceptionalClose.From" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-5 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">Jusqu'au :</label>
                            <div class="col-sm-9">
                                <InputDate class="form-control" @bind-Value="exceptionalClose.To" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-1 mx-2 my-1">
                        <button class="btn btn-outline-danger" type="button"
                        @onclick="@(() => RemoveExceptionalClose(exceptionalClose.Id))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            }

        </div>

        <div class="my-4">
            <div class="row border-bottom pb-3">
                <div class="col-10">
                    <h4 class="text-center align-bottom">Cours exceptionels</h4>
                </div>

                <div class="col-2">
                    <button class="btn btn-outline-secondary float-end" type="button" disabled="@(!Id.HasValue)"
                    @onclick="AddExceptionalSchedule">
                        +
                    </button>
                </div>
            </div>

            @foreach (var exceptionalSchedule in ModuleScheduleForm.ExceptionalSchedules)
            {
                <div class="row my-3">
                    <div class="col-lg-4 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">A la date du :</label>
                            <div class="col-sm-9">
                                <InputDate class="form-control" @bind-Value="exceptionalSchedule.Date" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">De :</label>
                            <div class="col-sm-9">
                                <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"
                                                  ShowTimeOkButton="true"
                                                  Change=@(args => OnChangeFrom(args, "Time-only DatePicker", "HH:mm", exceptionalSchedule.Id))
                                                  Class="w-100" Value="exceptionalSchedule.From" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">A :</label>
                            <div class="col-sm-9">
                                <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"
                                                  ShowTimeOkButton="true"
                                                  Change=@(args => OnChangeTo(args, "Time-only DatePicker", "HH:mm", exceptionalSchedule.Id))
                                                  Class="w-100" Value="exceptionalSchedule.To" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-1 mx-2 my-1">
                        <button class="btn btn-outline-danger" type="button"
                        @onclick="@(() => RemoveExceptionalSchedule(exceptionalSchedule.Id))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-outline-primary float-end" disabled="@(!Id.HasValue)">
                Enregistrer
            </button>
        </div>
    </EditForm>
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The preload service
    /// </summary>
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// The id of the module
    /// </summary>
    [Parameter]
    public int? Id { get; set; }

    /// <summary>
    /// The list of toast messages to display (Components)
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    /// <summary>
    /// The list of available teachers
    /// </summary>
    public IEnumerable<UserSelectionModel> Teachers { get; private set; } = new List<UserSelectionModel>();

    /// <summary>
    /// The module form
    /// </summary>
    public ModuleForm ModuleForm { get; private set; } = new();

    /// <summary>
    /// The module schedule form
    /// </summary>
    public ModuleScheduleForm ModuleScheduleForm { get; private set; } = new();

    /// <summary>
    /// List of available users for this module (students only)
    /// </summary>
    public IEnumerable<UserSelectionModel> AvailableUsers { get; private set; } = Enumerable.Empty<UserSelectionModel>();

    /// <summary>
    /// List of registered users for this module (students only)
    /// </summary>
    public IEnumerable<UserSelectionModel> RegisteredUsers { get; private set; } = Enumerable.Empty<UserSelectionModel>();

    // TODO : Change the page so the teacher also can access the data except the Teacher in charge field

    protected override async Task OnInitializedAsync()
    {
        // Load the list of teachers
        bool loadingTeachers = await LoadTeachersAsync();

        if (!loadingTeachers)
        {
            Logger.LogError("Loading teachers data failed");

            return;
        }

        await LoadModuleUsersAsync();
        await LoadAvailableUsersAsync();

        if (Id.HasValue)
        {
            // Load the module
            bool loadModule = await LoadModuleAsync();

            if (!loadModule)
            {
                Logger.LogError("Loading the module failed.");

                return;
            }

            // Load schedules
            ResultModel<IEnumerable<ScheduleModel>> schedulesResult = await ModuleService.GetModuleSchedulesAsync(Id.Value);

            if (!schedulesResult.Success)
            {
                Logger.LogError($"The schedules request failed with status code \"{schedulesResult.Code}\".\n{schedulesResult.Message}");

                ShowMessage(
                    ToastType.Danger,
                    "Chargement des horaires",
                    $"Le chargement des horaires a échoué.\n{schedulesResult.Message}",
                    false
                );

                return;
            }

            if (schedulesResult.Data is null)
            {
                Logger.LogError($"The schedules request succeeded but the data is null.\n{schedulesResult.Message}");

                ShowMessage(
                    ToastType.Danger,
                    "Chargement des horaires",
                    $"Le chargement des horaires est réussi mais les données sont null.\n{schedulesResult.Message}",
                    false
                );

                return;
            }

            IEnumerable<ScheduleModel> schedules = schedulesResult.Data;

            // Calculate start and end dates
            DateTime firstDay = schedules.FirstOrDefault()?.StartAt ?? DateTime.Now;

            // Sort schedules by EndAt in descending order and get the latest date
            DateTime lastDay = schedules.OrderByDescending(schedule => schedule.EndAt).FirstOrDefault()?.EndAt ?? DateTime.Now;

            // Set the start and end date of the form
            ModuleScheduleForm.StartDate = firstDay.Date;
            ModuleScheduleForm.EndDate = lastDay.Date;


            // Populate DayTimeSelectors
            foreach (DayTimeSelectorModel day in ModuleScheduleForm.DayTimeSelectors)
            {
                ScheduleModel? scheduleForDay = schedules.FirstOrDefault(s => s.StartAt.DayOfWeek == (DayOfWeek)day.DayOfWeek);

                int nbElements = schedules.Count(s => s.StartAt.DayOfWeek == (DayOfWeek)day.DayOfWeek);

                day.IsSelected = scheduleForDay is not null && nbElements > 1;
                day.From = nbElements > 1 ? scheduleForDay?.StartAt ?? new DateTime() : new DateTime();
                day.To = nbElements > 1 ? scheduleForDay?.EndAt ?? new DateTime() : new DateTime();
            }

            int index = 0;

            foreach (ScheduleModel schedule in schedules)
            {
                int nbSchedule = schedules.Count(sc => sc.StartAt.DayOfWeek == schedule.StartAt.DayOfWeek);

                if (nbSchedule == 1)
                {
                    ModuleScheduleForm.ExceptionalSchedules.Add(new(index)
                        {
                            Date = schedule.StartAt,
                            From = schedule.StartAt,
                            To = schedule.EndAt
                        });
                }

                index++;
            }

            // Generate ExceptionalCloses
            for (DateTime dti = firstDay; dti <= lastDay; dti = dti.AddDays(1))
            {
                // Check if schedules contains the exceptional close date time
                bool exist = schedules.Any(s => s.StartAt.Date == dti.Date);

                // Check if the current day of week is selected
                bool isSelected = ModuleScheduleForm
                    .DayTimeSelectors
                    .Any(dts => dts.IsSelected && (DayOfWeek)dts.DayOfWeek == dti.DayOfWeek);

                // If the exceptional close doesn't already exit and the day is not selected and the day is not sunday
                if (!exist && isSelected && dti.DayOfWeek != DayOfWeek.Sunday)
                {
                    // Set the close from datetime
                    DateTime closedFrom = dti;

                    // Set the close to datetime
                    DateTime closedTo = dti;

                    for (DateTime cdt = dti.AddDays(1); cdt < lastDay; cdt = cdt.AddDays(1))
                    {
                        bool cdtExist = schedules.Any(s => s.StartAt.Date == cdt.Date);

                        if (cdtExist)
                        {
                            break;
                        }

                        bool cdtIsSelected = ModuleScheduleForm.DayTimeSelectors.Any(dts =>
                            dts.IsSelected && (DayOfWeek)dts.DayOfWeek == cdt.DayOfWeek);

                        if (!cdtExist && cdtIsSelected)
                        {
                            closedTo = cdt;
                        }
                    }

                    int nbExceptionalCloses = ModuleScheduleForm.ExceptionalCloses.Count;

                    ModuleScheduleForm.ExceptionalCloses.Add(new ExceptionalCloseForm()
                        {
                            From = closedFrom,
                            To = closedTo,
                            Id = nbExceptionalCloses == 0 ? 0 : ModuleScheduleForm.ExceptionalCloses.Max(e => e.Id) + 1
                        });

                    dti = closedTo.Date;
                }
            }
        }

        StateHasChanged();
    }

    /// <summary>
    /// Load all the available teachers from the database
    /// </summary>
    /// <returns></returns>
    private async Task<bool> LoadTeachersAsync()
    {
        /// Load the teachers
        ResultModel<IEnumerable<UserModel>> result = await UserService.GetTeachersAsync();

        if (!result.Success)
        {
            Logger.LogError($"The teachers request failed with status codes \"{result.Code}\".\n{result.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement des professeurs",
                $"Le chargement de la liste des professeurs a échoué.\n{result.Message}",
                false);

            return false;
        }

        if (result.Data is null)
        {
            Logger.LogError($"The teachers request succeeded but data result is null.\n{result.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement des professeurs",
                $"Le chargement de la liste des professeurs est réussi mais les données retournées sont null.\n{result.Message}",
                false
            );

            return false;
        }

        Teachers = Mapper.Map<IEnumerable<UserSelectionModel>>(result.Data);

        return true;
    }

    /// <summary>
    /// Load all the available student users in the application
    /// </summary>
    /// <returns></returns>
    private async Task LoadAvailableUsersAsync()
    {
        ResultModel<IEnumerable<UserModel>> result = await UserService.GetStudentsAsync();

        if (!result.Success)
        {
            Logger.LogError($"The students request failed with status codes \"{result.Code}\".\n{result.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement des étudiants",
                $"Le chargement de la liste des étudiants a échoué.\n{result.Message}",
                false);

            return;
        }

        if (result.Data is null)
        {
            Logger.LogError($"The students request succeeded but data result is null.\n{result.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement des étudiants",
                $"Le chargement de la liste des étudiants est réussi mais les données retournées sont null.\n{result.Message}",
                false
            );

            return;
        }

        AvailableUsers = Mapper
            .Map<IEnumerable<UserSelectionModel>>(result.Data.Where(u => !RegisteredUsers.Any(ur => ur.Id.Equals(u.Id))));
    }

    /// <summary>
    /// Load all the users currently in the module
    /// </summary>
    /// <returns></returns>
    private async Task LoadModuleUsersAsync()
    {
        if (!Id.HasValue)
        {
            Logger.LogError("The id of the module is not defined!");

            ShowMessage(
                ToastType.Danger,
                "Échec",
                "Le chargement des étudiants a échoué car l'identifiant du module n'est pas défini.",
                false
            );

            return;
        }

        ResultModel<IEnumerable<UserModel>> result = await ModuleService.GetModuleStudentsAsync(Id.Value);

        if (!result.Success)
        {
            Logger.LogError(
                "The module students request failed with status codes \"{code}\".\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Échec",
                $"Le chargement des étudiants a échoué.\n{result.Message}",
                false
            );

            return;
        }

        if (result.Data is null)
        {
            Logger.LogError(
                "The module students request succeeded but data result is null.\n{msg}",
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Échec",
                $"Le chargement des étudiants a réussi mais les données retournées sont null.\n{result.Message}",
                false
            );

            return;
        }

        RegisteredUsers = Mapper.Map<IEnumerable<UserSelectionModel>>(result.Data);
    }

    /// <summary>
    /// Add the selected students in the available students list to the registered students list
    /// </summary>
    /// <returns></returns>
    private async Task AddStudentsToModule()
    {
        if (!Id.HasValue || Id.Value <= 0)
        {
            Logger.LogError(
                "The id of the module is not defined!"
            );

            ShowMessage(
                ToastType.Danger,
                "Échec",
                "Le chargement des étudiants a échoué car l'identifiant du module n'est pas défini.",
                false
            );

            return;
        }

        var selectedUsers = AvailableUsers.Where(u => u.Selected).ToList();

        for (int i = 0; i < selectedUsers.Count(); i++)
        {
            var user = selectedUsers[i];

            ResultModel<bool> result = await ModuleService.AddUserToModuleAsync(Id.Value, user.Id);

            if (!result.Success || !result.Data)
            {
                Logger.LogError(
                    "The user \"{user}\" could not be added to the module \"{module}\".\n{msg}",
                    user,
                    Id.Value,
                    result.Message
                );

                ShowMessage(
                    ToastType.Danger,
                    "Échec",
                    $"L'ajout de l'utilisateur \"{user.FullName}\" au module \"{Id.Value}\" a échoué.\n{result.Message}",
                    false
                );

                continue;
            }

            (AvailableUsers as List<UserSelectionModel>)?.Remove(user);
        }

        await LoadModuleUsersAsync();

        StateHasChanged();
    }

    /// <summary>
    /// Remove the selected students in the registered users list
    /// </summary>
    /// <returns></returns>
    private async Task RemoveStudentsFromModule()
    {
        if (!Id.HasValue || Id.Value <= 0)
        {
            Logger.LogError(
                "The id of the module is not defined!"
            );

            ShowMessage(
                ToastType.Danger,
                "Échec",
                "Le chargement des étudiants a échoué car l'identifiant du module n'est pas défini.",
                false
            );

            return;
        }

        var selectedUsers = RegisteredUsers.Where(u => u.Selected).ToList();

        for (int i = 0; i < selectedUsers.Count(); i++)
        {
            var user = selectedUsers[i];

            ResultModel<bool> result = await ModuleService.RemoveUserOfModuleAsync(Id.Value, user.Id);

            if (!result.Success || !result.Data)
            {
                Logger.LogError(
                    "The user \"{user}\" could not be remove from the module \"{module}\".\n{msg}",
                    user,
                    Id.Value,
                    result.Message
                );

                ShowMessage(
                    ToastType.Danger,
                    "Échec",
                    $"La suppression de l'utilisateur \"{user.FullName} \" du module \"{Id.Value}\" a échoué.\n{result.Message}",
                    false
                );

                continue;
            }

            (RegisteredUsers as List<UserSelectionModel>)?.Remove(user);
        }

        await LoadAvailableUsersAsync();

        StateHasChanged();
    }

    /// <summary>
    /// Load the current module by the given ID
    /// </summary>
    /// <returns></returns>
    private async Task<bool> LoadModuleAsync()
    {
        if (!Id.HasValue)
        {
            Logger.LogError("The id of the module is null");

            return false;
        }

        ResultModel<ModuleModel> moduleResult = await ModuleService.GetModuleAsync(Id.Value);

        if (!moduleResult.Success)
        {
            Logger.LogError($"The module request failed with status codes \"{moduleResult.Code}\".\n{moduleResult.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement du module",
                $"Le chargement du module a échoué.\n{moduleResult.Message}",
                false
            );

            return false;
        }

        if (moduleResult.Data is null)
        {
            Logger.LogError($"The module request succeeded but the data is null.\n{moduleResult.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement du module",
                $"Le chargement du module est réussi mais les données retournées sont null.\n{moduleResult.Data}",
                false
            );

            return false;
        }

        ModuleForm = Mapper.Map<ModuleForm>(moduleResult.Data);

        return true;
    }

    /// <summary>
    /// Event handler for the module <see cref="EditForm.OnValidSubmit"/>
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidModuleSubmitAsync()
    {
        PreloadService?.Show();

        ModuleCreationModel module = Mapper.Map<ModuleCreationModel>(ModuleForm);

        ResultModel<ModuleModel>? result = null;

        if (Id.HasValue)
        {
            result = await ModuleService.UpdateModuleAsync(Id.Value, module);
        }
        else
        {
            result = await ModuleService.CreateModuleAsync(module);
        }

        if (!result.Success)
        {
            Logger.LogError(
                "The changes of the module failed with status code \"{code}\".\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Enregistrement du module",
                $"L'enregistrement du module a échoué.\n{result.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (result.Data is null)
        {
            Logger.LogError(
                "The changes of the module succeeded but the returned data is null.\n{msg}",
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Enregistrement du module",
                $"L'enregistrement du module est réussi mais les données retournées sont null.\n{result.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (!Id.HasValue)
        {
            int createdModuleId = result.Data.Id;

            NavigationManager.NavigateTo($"/depot/manage-module/{createdModuleId}");
        }
        else
        {
            ModuleForm = Mapper.Map<ModuleForm>(result.Data);
        }

        PreloadService?.Hide();

        ShowMessage(
            ToastType.Success,
            "Enregistrement du module",
            "Les modifications ont correctement été enregistrées",
            true
        );
    }

    /// <summary>
    /// Event handler for the schedules <see cref="EditForm.OnValidSubmit"/>
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidModuleScheduleSubmitAsync()
    {
        PreloadService?.Show();

        if (!Id.HasValue)
        {
            Logger.LogError("The module id is null");

            ShowMessage(
                ToastType.Warning,
                "Action interdite",
                "Vous ne pouvez pas modifier l'horaire d'un module brouillon. Veuillez d'abord créer un module",
                false
            );

            PreloadService?.Hide();

            return;
        }

        ResultModel<IEnumerable<ScheduleModel>> schedulesResult = await ModuleService.GetModuleSchedulesAsync(Id.Value);

        if (!schedulesResult.Success)
        {
            Logger.LogError($"The schedules request failed with status code \"{schedulesResult.Code}\".\n{schedulesResult.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement des horaires",
                $"Le chargement des horaires a échoué.\n{schedulesResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (schedulesResult.Data is null)
        {
            Logger.LogError($"The schedules request succeeded but the data is null.\n{schedulesResult.Message}");

            ShowMessage(
                ToastType.Danger,
                "Chargement des horaires",
                $"Le chargement des horaires est réussi mais les données sont null.\n{schedulesResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        IEnumerable<ScheduleModel> schedules = schedulesResult.Data;

        List<ScheduleForm> schedulesToCreate = new();

        // Delete all the existing schedules
        try
        {
            // If the module start date is smaller (in the past) than today, retrieve all schedules starting from today
            if (ModuleScheduleForm.StartDate < DateTime.Now)
            {
                schedules = schedules.Where(s => s.StartAt >= DateTime.Now);
            }

            // Delete each schedule from the list
            foreach (ScheduleModel schedule in schedules)
            {
                ResultModel<bool> result = await ModuleService.DeleteScheduleAsync(Id.Value, schedule.Id);

                if (!result.Success)
                {
                    Logger.LogError(
                        "The deletion request failed with status code \"{code}\".\n{msg}",
                        result.Code,
                        result.Message
                    );

                    ShowMessage(
                        ToastType.Danger,
                        "Suppression",
                        $"La suppression de l'horaire du {schedule.StartAt.ToString("F")} a échoué",
                        false
                    );
                }

                if (!result.Data)
                {
                    Logger.LogWarning(
                        "The deletion of schedule with id {sId} of module with id {mId} failed.\n{msg}",
                        schedule.Id,
                        Id.Value,
                        result.Message
                    );

                    ShowMessage(
                        ToastType.Warning,
                        "Suppression de l'horaire",
                        $"La suprresion de l'horaire du {schedule.StartAt.ToString("F")} a échoué",
                        false
                    );
                }
                else
                {
                    Logger.LogInformation("The deletion of module with {id} succeeded", schedule.Id);

                    ShowMessage(
                        ToastType.Success,
                        "Suppression de l'horaire",
                        $"La suppression de l'horaire du {schedule.StartAt.ToString("F")} s'est fait correctement",
                        true
                    );
                }
            }
        }
        catch (Exception e)
        {
            Logger.LogError(
                "{date} - An exception was thrown when trying to delete a schedule :\n{eMsg}\n{eStr}",
                DateTime.Now,
                e.Message,
                e.StackTrace
            );

            ShowMessage(
                ToastType.Danger,
                "Suppression de l'horaire",
                "Une erreur est survenue lors de la suppression de l'horaire. Veuillez recharger la page",
                false
            );

            PreloadService?.Hide();

            return;
        }

        DateTime start = ModuleScheduleForm.StartDate > DateTime.Now ? ModuleScheduleForm.StartDate : DateTime.Now;
        DateTime end = ModuleScheduleForm.EndDate;

        // Load the list of schedules to create
        foreach (DateTime dti in Utils.EachDay(start, end))
        {
            DayTimeSelectorModel? daySelection = ModuleScheduleForm.DayTimeSelectors
                .FirstOrDefault(dts => dts.IsSelected && dts.DayOfWeek == (DaysOfTheWeekFr)dti.DayOfWeek);

            if (daySelection is null)
            {
                Logger.LogInformation("The selected day is null");

                continue;
            }

            bool isExceptionallyClosed = ModuleScheduleForm.ExceptionalCloses.Any(e => dti >= e.From && dti <= e.To);

            if (isExceptionallyClosed)
            {
                Logger.LogInformation("The {date} is registered as exceptionally closed", dti.ToString("G"));

                continue;
            }

            DateTime startAt = dti.Date + daySelection.From.TimeOfDay;
            DateTime endAt = dti.Date + daySelection.To.TimeOfDay;

            schedulesToCreate.Add(new ScheduleForm()
                {
                    StartAt = startAt,
                    EndAt = endAt
                });
        }

        // Creation of the schedules
        foreach (ScheduleForm schedule in schedulesToCreate)
        {
            try
            {
                ScheduleCreateModel scheduleToCreate = Mapper.Map<ScheduleCreateModel>(schedule);

                ResultModel<ScheduleModel> scheduleResult = await ModuleService.CreateScheduleAsync(Id.Value, scheduleToCreate);

                if (!scheduleResult.Success)
                {
                    Logger.LogError(
                        "The creation of the schedule for date {date} failed with status codes {code}.\n{msg}",
                        schedule.StartAt.ToString("G"),
                        scheduleResult.Code,
                        scheduleResult.Message
                    );

                    ShowMessage(
                        ToastType.Warning,
                        "Échec de la création",
                        $"La création de l'horaire pour le {schedule.StartAt.ToString("F")} a échoué.\n{scheduleResult.Message}",
                        false
                    );

                    continue;
                }

                if (scheduleResult.Data is null)
                {
                    Logger.LogError(
                        "The creation of the schedule for date {date} succeded but the returned data is null.\n{msg}",
                        schedule.StartAt.ToString("G"),
                        scheduleResult.Message
                    );

                    ShowMessage(
                        ToastType.Warning,
                        "Échec de la création",
                        $"La création de l'horaire pour le {schedule.StartAt.ToString("F")} a réussi mais les données " +
                        $"sont null.\n{scheduleResult.Message}",
                        false
                    );

                    continue;
                }

                ScheduleModel createdSchedule = scheduleResult.Data;
            }
            catch (Exception e)
            {
                Logger.LogError(
                    "{date} - An exception was thrown when trying to create a Schedule {eMsg}\n{eStr}",
                    DateTime.Now,
                    e.Message,
                    e.StackTrace
                );
            }
        }

        // Create the exceptional schedules
        foreach (ExceptionalScheduleForm exceptionalSchedule in ModuleScheduleForm.ExceptionalSchedules)
        {
            try
            {
                DateTime scheduleFrom = exceptionalSchedule.Date
                    .AddHours(exceptionalSchedule.From.Hour)
                    .AddMinutes(exceptionalSchedule.From.Minute);

                DateTime scheduleTo = exceptionalSchedule.Date
                    .AddHours(exceptionalSchedule.To.Hour)
                    .AddMinutes(exceptionalSchedule.To.Minute);

                ScheduleCreateModel scheduleCreate = new ScheduleCreateModel()
                    {
                        StartAt = scheduleFrom,
                        EndAt = scheduleTo
                    };

                ResultModel<ScheduleModel> scheduleResult = await ModuleService.CreateScheduleAsync(Id.Value, scheduleCreate);

                if (!scheduleResult.Success)
                {
                    Logger.LogError(
                        "The creation of the schedule for date {date} failed with status codes {code}.\n{msg}",
                        scheduleCreate.StartAt.ToString("G"),
                        scheduleResult.Code,
                        scheduleResult.Message
                    );

                    ShowMessage(
                        ToastType.Warning,
                        "Échec de la création",
                        $"La création de l'horaire pour le {scheduleCreate.StartAt.ToString("F")} a échoué.\n{scheduleResult.Message}",
                        false
                    );

                    continue;
                }

                if (scheduleResult.Data is null)
                {
                    Logger.LogError(
                        "The creation of the schedule for date {date} succeded but the returned data is null.\n{msg}",
                        scheduleCreate.StartAt.ToString("G"),
                        scheduleResult.Message
                    );

                    ShowMessage(
                        ToastType.Warning,
                        "Échec de la création",
                        $"La création de l'horaire pour le {scheduleCreate.StartAt.ToString("F")} a réussi mais les données " +
                        $"sont null.\n{scheduleResult.Message}",
                        false
                    );

                    continue;
                }
            }
            catch (Exception e)
            {
                Logger.LogError(
                    "{date} - An exception occurred when trying to create an exceptional schedule:\n{eMsg}\n{eStr}",
                    DateTime.Now,
                    e.Message,
                    e.StackTrace
                );
            }
        }

        PreloadService?.Hide();

        ShowMessage(
            ToastType.Success,
            "Horaire",
            "L'horaire du module a été crée",
            true
        );
    }

    /// <summary>
    /// Add a new empty <see cref="ExceptionalCloseForm"/> in <see cref="ModuleScheduleForm.ExceptionalCloses"/>
    /// </summary>
    private void AddExceptionalClose()
    {
        ModuleScheduleForm.ExceptionalCloses.Add(new ExceptionalCloseForm(ModuleScheduleForm.ExceptionalCloses.Count));
    }

    /// <summary>
    /// Remove a <see cref="ExceptionalCloseForm"/> of <see cref="ModuleScheduleForm.ExceptionalCloses"/>
    /// </summary>
    /// <param name="id">The id of the <see cref="ExceptionalCloseForm"/> in the list</param>
    private void RemoveExceptionalClose(int id)
    {
        try
        {
            ExceptionalCloseForm? element = ModuleScheduleForm.ExceptionalCloses.Find(e => e.Id.Equals(id));

            if (element is null)
            {
                Logger.LogWarning("{date} - There is no element in the list with ID \"{id}\"", DateTime.Now, id);
            }
            else
            {
                ModuleScheduleForm.ExceptionalCloses.Remove(element);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Logger.LogError(
                "{date} - An exception was thrown when trying to remove an exceptional close :\n{eMsg}\n{eStr}",
                DateTime.Now,
                e.Message,
                e.StackTrace
            );
        }
    }

    /// <summary>
    /// A a <see cref="ExceptionalScheduleForm"/> in <see cref="ModuleScheduleForm.ExceptionalSchedules"/>
    /// </summary>
    private void AddExceptionalSchedule()
    {
        int nbExceptinalSchedules = ModuleScheduleForm.ExceptionalSchedules.Count;

        ModuleScheduleForm.ExceptionalSchedules.Add(new ExceptionalScheduleForm(nbExceptinalSchedules));
    }

    /// <summary>
    /// Remove a <see cref="ExceptionalScheduleForm"/> from <see cref="ModuleScheduleForm.ExceptionalSchedules"/>
    /// by the given id
    /// </summary>
    /// <param name="id">
    /// The id of the <see cref="ExceptionalScheduleForm"/> in <see cref="ModuleScheduleForm.ExceptionalSchedules"/>
    /// </param>
    private void RemoveExceptionalSchedule(int id)
    {
        try
        {
            ExceptionalScheduleForm? element = ModuleScheduleForm.ExceptionalSchedules.Find(e => e.Id.Equals(id));

            if (element is null)
            {
                Logger.LogWarning("{date} - There is no element in the list with ID \"{id}\"", DateTime.Now, id);
            }
            else
            {
                ModuleScheduleForm.ExceptionalSchedules.Remove(element);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Logger.LogError(
                "{date} - An exception was thrown when trying to remove an exceptional schedule :\n{eMsg}\n{eStr}",
                DateTime.Now,
                e.Message,
                e.StackTrace
            );
        }
    }

    /// <summary>
    /// Event handler for <see cref="RadzenDatePicker.Change"/> for the <see cref="ExceptionalScheduleForm.From"/>
    /// with the given id in <see cref="ModuleScheduleForm.ExceptionalSchedules"/>
    /// </summary>
    /// <param name="value">The new datetime value</param>
    /// <param name="name">The format name</param>
    /// <param name="format">The format</param>
    /// <param name="id">The id of the <see cref="ExceptionalScheduleForm"/></param>
    private void OnChangeFrom(DateTime? value, string name, string format, int id)
    {
        if (!value.HasValue)
        {
            Logger.LogWarning("{val} has no value", nameof(value));

            return;
        }

        ExceptionalScheduleForm? element = ModuleScheduleForm.ExceptionalSchedules.Find(e => e.Id.Equals(id));

        if (element is null)
        {
            Logger.LogError("The {type} with id \"{id}\" is null", typeof(ExceptionalScheduleForm), id);

            return;
        }

        int index = ModuleScheduleForm.ExceptionalSchedules.IndexOf(element);

        ModuleScheduleForm.ExceptionalSchedules[index].From = value.Value;

        Logger.LogInformation(
            "{date} - {name} new value {from}",
            DateTime.Now,
            nameof(element.From),
            ModuleScheduleForm.ExceptionalSchedules[index].From.ToString()
        );
    }

    /// <summary>
    /// Event handler for <see cref="RadzenDatePicker.Change"/> for the <see cref="ExceptionalScheduleForm.To"/>
    /// with the given id in <see cref="ModuleScheduleForm.ExceptionalSchedules"/>
    /// </summary>
    /// <param name="value">The new datetime value</param>
    /// <param name="name">The format name</param>
    /// <param name="format">The format</param>
    /// <param name="id">The id of the <see cref="ExceptionalScheduleForm"/></param>
    private void OnChangeTo(DateTime? value, string name, string format, int id)
    {
        if (!value.HasValue)
        {
            Logger.LogWarning("{val} has no value", nameof(value));

            return;
        }

        ExceptionalScheduleForm? element = ModuleScheduleForm.ExceptionalSchedules.Find(e => e.Id.Equals(id));

        if (element is null)
        {
            Logger.LogError("The {type} with id \"{id}\" is null", typeof(ExceptionalScheduleForm), id);

            return;
        }


        int index = ModuleScheduleForm.ExceptionalSchedules.IndexOf(element);

        ModuleScheduleForm.ExceptionalSchedules[index].To = value.Value;

        Logger.LogInformation(
            "{date} - {name} new value {from}",
            DateTime.Now,
            nameof(element.To),
            ModuleScheduleForm.ExceptionalSchedules[index].To.ToString()
        );
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
