@page "/depot/manageOpeningHours"

@using Web.DepotEice.BLL.IServices
@using Web.DepotEice.BLL.Models
@using Web.DepotEice.Helpers
@using Web.DepotEice.UIL.Helpers;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models.Forms
@using Web.DepotEice.UIL.Models;
@using Web.DepotEice.UIL.ViewModels
@using static Web.DepotEice.UIL.Helpers.Utils;

@inject ILogger<ManageOpeningHours> Logger;
@inject IOpeningHoursService OpeningHoursService;
@inject UserManager UserManager;
@inject NavigationManager NavigationManager;

<Authorize Role="@UserManager.DIRECTION_ROLE">
    <Authorized>
        <h3 class="text-center my-5">Gérer les heures d'ouvertures</h3>

        <div class="container">

            <EditForm Model="viewModel" OnValidSubmit="SubmitForm">

                <div class="row border-bottom pb-3">
                    <div class="mb-3">
                        <label class="form-label">Date du premier jour d'ouverture</label>
                        <InputDate class="form-control" @bind-Value="viewModel.StartDate" />
                    </div>
                    <div class="mb-3">
                        <label for="" class="form-label">Date du dernier jour d'ouverture</label>
                        <InputDate class="form-control" @bind-Value="viewModel.EndDate" />
                    </div>
                </div>

                <div class="d-lg-inline-flex w-100 my-4 pb-3 border-bottom">

                    @foreach (var item in viewModel.DayTimeSelectors)
                    {
                        <div class="col-lg-2 mb-4">
                            <DayTimeSelector DayTimeSelectorModel="item" Disabled="false" />
                        </div>
                    }

                </div>

                <div class="my-4 border-bottom">
                    <div class="row border-bottom pb-3">
                        <div class="col-10 ">
                            <h4 class="text-center align-bottom">Fermeture exceptionnelle</h4>
                        </div>
                        <div class="col-2">
                            <button @onclick="AddExceptionalClose" class="btn btn-outline-secondary float-end" type="button">
                                <Icon Name="IconName.PlusCircle"></Icon>
                            </button>
                        </div>
                    </div>

                    @foreach (var item in viewModel.ExceptionalCloses)
                    {
                        <div class="row my-3">
                            <div class="col-lg-5 mx-2 my-1">
                                <div class="d-inline-flex w-100">
                                    <label class="col-form-label col-3 me-3">A partir du :</label>
                                    <div class="col-sm-9">
                                        <InputDate class="form-control" @bind-Value="item.From" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-5 mx-2 my-1">
                                <div class="d-inline-flex w-100">
                                    <label class="col-form-label col-3 me-3">Jusqu'au :</label>
                                    <div class="col-sm-9">
                                        <InputDate class="form-control" @bind-Value="item.To" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-1 mx-2 my-1">
                                <button @onclick="@(() => RemoveExceptionalClose(item.Id))" class="btn btn-outline-danger"
                                        type="button">
                                    <Icon Name="IconName.Trash"></Icon>
                                </button>
                            </div>
                        </div>
                    }

                </div>

                <button class="btn btn-outline-primary float-end">Enregistrer</button>

                <button @onclick="OnResetOpeningHoursAsync" class="btn btn-outline-danger float-end mx-2"
                        type="button">
                    Réinitaliser
                </button>

            </EditForm>
        </div>
    </Authorized>
    <Unauthorized>
        <h3 class="my-5 text-center">Vous n'êtes pas autorisé à accéder à cette page</h3>
    </Unauthorized>
</Authorize>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// Preload service
    /// </summary>
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// The list of Toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    /// <summary>
    /// View model
    /// </summary>
    private CreateOpeningHoursViewModel viewModel = new();

    /// <summary>
    /// Initialization of the component
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        PreloadService?.Show();

        ResultModel<IEnumerable<OpeningHoursModel>> openingHoursResult = await OpeningHoursService.GetOpeningHoursAsync();

        if (!openingHoursResult.Success)
        {
            Logger.LogError(
                "Requesting the opening hours failed with status code {code}.\n{msg}",
                openingHoursResult.Code,
                openingHoursResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération des horaires",
                $"La récupération des horaires a échoué.\n{openingHoursResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (openingHoursResult.Data is null)
        {
            Logger.LogError(
                "Get opening hours request succeeded but no data was returned.\n{msg}",
                openingHoursResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération des horaires",
                $"La récupération des horaires a réussi mais aucune donnée n'a été retournée.\n{openingHoursResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        IEnumerable<OpeningHoursModel> openingHoursfromRepo = openingHoursResult.Data.OrderBy(oh => oh.OpenAt);

        DateTime firstDay = openingHoursfromRepo.First().OpenAt;
        DateTime lastDay = openingHoursfromRepo.Last().CloseAt;

        viewModel.StartDate = new DateTime(firstDay.Year, firstDay.Month, firstDay.Day);
        viewModel.EndDate = new DateTime(lastDay.Year, lastDay.Month, lastDay.Day);

        foreach (DayTimeSelectorModel day in viewModel.DayTimeSelectors)
        {
            OpeningHoursModel? val = openingHoursfromRepo.FirstOrDefault(oh => oh.OpenAt.DayOfWeek == (DayOfWeek)day.DayOfWeek);

            if (val is null)
            {
                day.IsSelected = false;
                day.From = new DateTime();
                day.To = new DateTime();
            }
            else
            {
                day.IsSelected = true;
                day.From = val.OpenAt;
                day.To = val.CloseAt;
            }
        }

        for (DateTime dti = firstDay; dti <= lastDay; dti = dti.AddDays(1))
        {
            bool exist = openingHoursfromRepo.Any(oh => oh.OpenAt.Equals(dti, DateTimeComparison.YearMonthDay));

            bool isSelected = viewModel.DayTimeSelectors.Any(dts =>
                dts.IsSelected && (DayOfWeek)dts.DayOfWeek == dti.DayOfWeek);

            if (!exist && isSelected && dti.DayOfWeek != DayOfWeek.Sunday)
            {
                DateTime closedFrom = dti;
                DateTime closedTo = dti;

                bool closureOver = false;

                for (DateTime cdt = dti.AddDays(1); cdt < lastDay && !closureOver; cdt = cdt.AddDays(1))
                {
                    bool cdtExist = openingHoursfromRepo.Any(oh => oh.OpenAt.Equals(cdt, DateTimeComparison.YearMonthDay));

                    if (cdtExist)
                    {
                        closureOver = true;
                    }

                    bool cdtIsSelected = viewModel.DayTimeSelectors.Any(dts =>
                        dts.IsSelected && (DayOfWeek)dts.DayOfWeek == cdt.DayOfWeek);

                    if (!cdtExist && cdtIsSelected)
                    {
                        closedTo = cdt;
                    }
                }

                viewModel.ExceptionalCloses.Add(new ExceptionalCloseForm()
                    {
                        From = closedFrom,
                        To = closedTo,
                        Id = viewModel.ExceptionalCloses.Count == 0 ? 0 : viewModel.ExceptionalCloses.OrderBy(e => e.Id).Last().Id + 1
                    });

                Logger.LogInformation(viewModel.ExceptionalCloses.Count.ToString());

                dti = new DateTime(closedTo.Year, closedTo.Month, closedTo.Day);
            }
        }
    }

    /// <summary>
    /// Event handler triggered when add an exception closing time button is clicked
    /// </summary>
    private void AddExceptionalClose()
    {
        viewModel.ExceptionalCloses.Add(new ExceptionalCloseForm(viewModel.ExceptionalCloses.Count));
    }

    /// <summary>
    /// Event handler triggered when remove an exception closing time button is clicked
    /// </summary>
    /// <param name="id"></param>
    private void RemoveExceptionalClose(int id)
    {
        try
        {
            ExceptionalCloseForm? element = viewModel.ExceptionalCloses.Find(e => e.Id.Equals(id));

            if (element is null)
            {
                Logger.LogWarning("{date} - There is no element in the list with ID \"{id}\"", DateTime.Now, id);
            }
            else
            {
                viewModel.ExceptionalCloses.Remove(element);
            }
        }
        catch (Exception e)
        {
            Logger.LogError("{date} - {exception}", DateTime.Now, e.Message);
        }
    }

    /// <summary>
    /// Event handler triggered when the reset button is clicked
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnResetOpeningHoursAsync(MouseEventArgs args)
    {
        PreloadService?.Show();

        ResultModel<IEnumerable<OpeningHoursModel>> openingHoursResult = await OpeningHoursService.GetOpeningHoursAsync();

        if (!openingHoursResult.Success)
        {
            Logger.LogError(
                "Requesting the opening hours failed with status code {code}.\n{msg}",
                openingHoursResult.Code,
                openingHoursResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération des horaires",
                $"La récupération des horaires a échoué.\n{openingHoursResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (openingHoursResult.Data is null)
        {
            Logger.LogError(
                "Get opening hours request succeeded but no data was returned.\n{msg}",
                openingHoursResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération des horaires",
                $"La récupération des horaires a réussi mais aucune donnée n'a été retournée.\n{openingHoursResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        IEnumerable<OpeningHoursModel> openingHoursFromRepo = openingHoursResult.Data;

        foreach (OpeningHoursModel openingHours in openingHoursFromRepo)
        {
            ResultModel<bool> deleteResult = await OpeningHoursService.DeleteOpeningHoursAsync(openingHours.Id);

            if (!deleteResult.Success || !deleteResult.Data)
            {
                Logger.LogError(
                    "Delete opening hours request for \"{id}\" failed with status code {code}.\n{msg}",
                    openingHours.Id,
                    deleteResult.Code,
                    deleteResult.Message
                );

                ShowMessage(
                    ToastType.Danger,
                    "Suppression des horaires",
                    $"La suppression des horaires a échoué.\n{deleteResult.Message}",
                    false
                );
            }
        }

        NavigationManager.NavigateTo("/depot/manageOpeningHours", true);

        PreloadService?.Hide();
    }

    /// <summary>
    /// Event handler triggered when the form is submitted and valid
    /// </summary>
    /// <returns></returns>
    public async Task SubmitForm()
    {
        PreloadService?.Show();

        List<OpeningHoursCreateModel> openingHoursToCreate = new List<OpeningHoursCreateModel>();

        ResultModel<IEnumerable<OpeningHoursModel>> openingHoursResult = await OpeningHoursService.GetOpeningHoursAsync();

        if (!openingHoursResult.Success)
        {
            Logger.LogError(
                "Requesting the opening hours failed with status code {code}.\n{msg}",
                openingHoursResult.Code,
                openingHoursResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération des horaires",
                $"La récupération des horaires a échoué.\n{openingHoursResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (openingHoursResult.Data is null)
        {
            Logger.LogError(
                "Get opening hours request succeeded but no data was returned.\n{msg}",
                openingHoursResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Récupération des horaires",
                $"La récupération des horaires a réussi mais aucune donnée n'a été retournée.\n{openingHoursResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        IEnumerable<OpeningHoursModel> openingHoursFromRepo = openingHoursResult.Data;

        try
        {
            foreach (OpeningHoursModel item in openingHoursFromRepo)
            {
                ResultModel<bool> result = await OpeningHoursService.DeleteOpeningHoursAsync(item.Id);

                if (!result.Success || !result.Data)
                {
                    Logger.LogError(
                        "Delete opening hours request for \"{id}\" failed with status code {code}.\n{msg}",
                        item.Id,
                        result.Code,
                        result.Message
                    );

                    ShowMessage(
                        ToastType.Danger,
                        "Suppression des horaires",
                        $"La suppression des horaires a échoué.\n{result.Message}",
                        false
                    );
                }
            }
        }
        catch (Exception e)
        {
            Logger.LogError(
                "{date} - An exception was thrown when trying to delete an opening hours.\n{eMsg}\n{eStr}",
                DateTime.Now,
                e.Message,
                e.StackTrace
            );
        }


        for (DateTime dti = viewModel.StartDate; dti <= viewModel.EndDate; dti = dti.AddDays(1))
        {
            DayTimeSelectorModel? daySelector =
                viewModel.DayTimeSelectors
                    .FirstOrDefault(dts => dts.IsSelected && dts.DayOfWeek == (DaysOfTheWeekFr)dti.DayOfWeek);

            bool isExceptionalyClosed = viewModel.ExceptionalCloses.Any(e => dti >= e.From && dti <= e.To);

            if (daySelector is not null && !isExceptionalyClosed)
            {
                openingHoursToCreate.Add(new OpeningHoursCreateModel()
                    {
                        OpenAt = new DateTime(dti.Year, dti.Month, dti.Day, daySelector.From.Hour, daySelector.From.Minute, 0),
                        CloseAt = new DateTime(dti.Year, dti.Month, dti.Day, daySelector.To.Hour, daySelector.To.Minute, 0)
                    });
            }
        }

        foreach (OpeningHoursCreateModel openingHours in openingHoursToCreate)
        {
            try
            {
                ResultModel<OpeningHoursModel> createResult =
                    await OpeningHoursService.CreateOpeningHoursAsync(openingHours);

                if (!createResult.Success || createResult.Data is null)
                {
                    Logger.LogError(
                        "{date} - Creating opening hours for \"{dateFrom}\" failed with status {code}.\n{msg}",
                        DateTime.Now,
                        openingHours.OpenAt,
                        createResult.Code,
                        createResult.Message
                    );

                    continue;
                }
            }
            catch (Exception e)
            {
                Logger.LogError(
                    "An exception was thrown while trying to create opening hours {start} to {end}.\n{eMsg}\n{eStr}",
                    openingHours.OpenAt.ToString("F"),
                    openingHours.CloseAt.ToString("F"),
                    e.Message,
                    e.StackTrace
                );
            }
        }

        NavigationManager.NavigateTo("/depot/manageOpeningHours", true);

        PreloadService?.Hide();
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
