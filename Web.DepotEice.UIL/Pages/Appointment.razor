@page "/appointment"

@using Web.DepotEice.BLL.IServices
@using Web.DepotEice.BLL.Models
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models.Forms

@inject ILogger<Appointment> Logger;
@inject IOpeningHoursService OpeningHoursService;
@inject UserManager UserManager;

<PageTitle>Rendez-vous</PageTitle>

<h2 class="text-center my-5">Prendre rendez-vous</h2>

<div class="container my-5 py-5 bg-light border border-1">
    <div class="d-flex flex-column align-items-center justify-content-center mt-2">

        <EditForm class="mt-3" Model="@_appointmentForm" OnValidSubmit="@OnValidationSubmit" style="width: 50%">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="mb-3">
                <label for="date" class="form-label">Date</label>
                <RadzenDatePicker TValue="DateTime?" Inline="true"
                                  DateRender="@DateRenderOpenDates"
                                  Change="@(args => OnChange(args, "Calendar", "MM/dd/yyyy"))"
                                  Value="_appointmentForm.From" />
                <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"
                                  ShowTimeOkButton="true"
                                  Min="_minimumDateTime"
                                  Change=@(args => OnChange(args, "Time-only DatePicker", "HH:mm")) Class="w-100"
                                  Value="_appointmentForm.From" />
                <ValidationMessage class="text-danger" For="@(() => _appointmentForm.From)" />
            </div>

            <div class="mb-3">
                <span class="text-danger">@_validationMessage</span>
            </div>
            <div class="mb-3">
                @if (UserManager.IsConnected)
                {
                    <button type="submit" class="btn btn-outline-primary mx-auto">
                        Prendre rendez-vous
                    </button>
                }
                else
                {
                    <span class="text-danger">
                        Pour prendre rendez-vous, veuillez vous connecter ou vous s'inscrire en cliquant
                    </span>
                    <NavLink href="/login" class="" >ici</NavLink>
                }

            </div>
        </EditForm>
    </div>
</div>

@code {
    // TODO : Finir cette page

    private AppointmentForm _appointmentForm = new();
    private List<DateTime> _restrictedDate = new List<DateTime>();
    private IEnumerable<OpeningHoursModel>? _openingHours;

    private DateTime _minimumDateTime = DateTime.Now;

    private string _validationMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _openingHours = await OpeningHoursService.GetOpeningHoursAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _restrictedDate.Add(new DateTime(2022, 11, 5, 12, 0, 0));
            _restrictedDate.Add(new DateTime(2022, 11, 5, 18, 0, 0));
        }
    }

    private void DateRenderOpenDates(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.DayOfWeek == DayOfWeek.Sunday;
    }

    private void DateRenderOpenDateTimes(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || args.Date.TimeOfDay < new TimeSpan(16, 0, 0);
    }

    private void OnChange(DateTime? value, string name, string format)
    {
        if (value is not null)
        {
            _appointmentForm.From = value.Value;

            Logger.LogInformation(_appointmentForm.From.ToString());
        }
    }

    public void OnValidationSubmit()
    {

    }
}
