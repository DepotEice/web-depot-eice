@page "/depot/manageOpeningHours"

@using Web.DepotEice.BLL.IServices
@using Web.DepotEice.BLL.Models
@using Web.DepotEice.Helpers
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models.Forms
@using Web.DepotEice.UIL.ViewModels

@inject ILogger<ManageOpeningHours> Logger;
@inject IOpeningHoursService OpeningHoursService;
@inject UserManager UserManager;
@inject NavigationManager NavigationManager;

<h3 class="text-center my-5">Gérer les heures d'ouvertures</h3>

<div class="container">

    <EditForm Model="viewModel" OnValidSubmit="SubmitForm">

        <div class="row border-bottom pb-3">
            <div class="mb-3">
                <label class="form-label">Date du premier jour d'ouverture</label>
                <InputDate class="form-control" @bind-Value="viewModel.StartDate" />
            </div>
            <div class="mb-3">
                <label for="" class="form-label">Date du dernier jour d'ouverture</label>
                <InputDate class="form-control" @bind-Value="viewModel.EndDate" />
            </div>
        </div>

        <div class="d-lg-inline-flex w-100 my-4 pb-3 border-bottom">

            @foreach (var item in viewModel.DayTimeSelectors)
            {
                <div class="col-lg-2 mb-4">
                    <DayTimeSelector DayTimeSelectorModel="item" Disabled="false" />
                </div>
            }

        </div>

        <div class="my-4 border-bottom">
            <div class="row border-bottom pb-3">
                <div class="col-10 ">
                    <h4 class="text-center align-bottom">Fermeture exceptionnelle</h4>
                </div>
                <div class="col-2">
                    <button class="btn btn-outline-secondary float-end" type="button" @onclick="AddExceptionalClose">+</button>
                </div>
            </div>

            @foreach (var item in viewModel.ExceptionalCloses)
            {
                <div class="row my-3">
                    <div class="col-lg-5 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">A partir du :</label>
                            <div class="col-sm-9">
                                <InputDate class="form-control" @bind-Value="item.From" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-5 mx-2 my-1">
                        <div class="d-inline-flex w-100">
                            <label class="col-form-label col-3 me-3">Jusqu'au :</label>
                            <div class="col-sm-9">
                                <InputDate class="form-control" @bind-Value="item.To" />
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-1 mx-2 my-1">
                        <button class="btn btn-outline-danger" @onclick="@(() => RemoveExceptionalClose(item.Id))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            }

        </div>

        <button class="btn btn-outline-primary float-end">Enregistrer</button>

    </EditForm>
</div>

@code {
    private CreateOpeningHoursViewModel viewModel = new();

    protected override async Task OnInitializedAsync()
    {
        if (!await UserManager.IsInRoleAsync(UserManager.DIRECTION_ROLE))
        {
            NavigationManager.NavigateTo("unauthorized");
            return;
        }
        var openingHoursfromRepo = await OpeningHoursService.GetOpeningHoursAsync();

        var firstDay = openingHoursfromRepo.First().OpenAt;
        var lastDay = openingHoursfromRepo.Last().CloseAt;

        viewModel.StartDate = new DateTime(firstDay.Year, firstDay.Month, firstDay.Day);
        viewModel.EndDate = new DateTime(lastDay.Year, lastDay.Month, lastDay.Day);

        var firstMonday = openingHoursfromRepo.FirstOrDefault(oh => oh.OpenAt.DayOfWeek.Equals(DayOfWeek.Monday));

        foreach (var day in viewModel.DayTimeSelectors)
        {
            var val = openingHoursfromRepo.FirstOrDefault(oh => oh.OpenAt.DayOfWeek == (DayOfWeek)day.DayOfWeek);

            if (val is null)
            {
                day.IsSelected = false;
                day.From = new DateTime();
                day.To = new DateTime();
            }
            else
            {
                day.IsSelected = true;
                day.From = val.OpenAt;
                day.To = val.CloseAt;
            }
        }

        for (DateTime dti = firstDay; dti <= lastDay; dti = dti.AddDays(1))
        {
            bool exist = openingHoursfromRepo.Any(oh =>
                oh.OpenAt.Year == dti.Year && oh.OpenAt.Month == dti.Month && oh.OpenAt.Day == dti.Day);

            bool isSelected = viewModel.DayTimeSelectors.Any(dts =>
                dts.IsSelected && (DayOfWeek)dts.DayOfWeek == dti.DayOfWeek);

            if (!exist && isSelected && dti.DayOfWeek != DayOfWeek.Sunday)
            {
                DateTime closedFrom = dti;
                DateTime closedTo = dti;

                bool closureOver = false;

                for (DateTime cdt = dti.AddDays(1); cdt < lastDay && !closureOver; cdt = cdt.AddDays(1))
                {
                    bool cdtExist = openingHoursfromRepo.Any(oh =>
                        oh.OpenAt.Year == cdt.Year && oh.OpenAt.Month == cdt.Month && oh.OpenAt.Day == cdt.Day);

                    if (cdtExist)
                    {
                        closureOver = true;
                    }

                    bool cdtIsSelected = viewModel.DayTimeSelectors.Any(dts =>
                        dts.IsSelected && (DayOfWeek)dts.DayOfWeek == cdt.DayOfWeek);

                    if (!cdtExist && cdtIsSelected)
                    {
                        closedTo = cdt;
                    }
                }

                viewModel.ExceptionalCloses.Add(new ExceptionalCloseForm()
                    {
                        From = closedFrom,
                        To = closedTo,
                        Id = viewModel.ExceptionalCloses.Count == 0
                                    ? 0
                                    : viewModel.ExceptionalCloses.OrderBy(e => e.Id).Last().Id + 1
                    });

                Logger.LogInformation(viewModel.ExceptionalCloses.Count.ToString());

                dti = new DateTime(closedTo.Year, closedTo.Month, closedTo.Day);
            }
        }
    }

    private void AddExceptionalClose()
    {
        viewModel.ExceptionalCloses.Add(new ExceptionalCloseForm(viewModel.ExceptionalCloses.Count));
        Logger.LogInformation($"{viewModel.ExceptionalCloses.Count}");
    }

    private void RemoveExceptionalClose(int id)
    {
        try
        {
            var element = viewModel.ExceptionalCloses.Find(e => e.Id.Equals(id));
            if (element is null)
            {
                Logger.LogWarning("{date} - There is no element in the list with ID \"{id}\"", DateTime.Now, id);
            }
            else
            {
                viewModel.ExceptionalCloses.Remove(element);
            }
        }
        catch (Exception e)
        {
            Logger.LogError("{date} - {exception}", DateTime.Now, e.Message);
        }

    }

    public async Task SubmitForm()
    {
        List<OpeningHoursCreateModel> openingHoursToCreate = new List<OpeningHoursCreateModel>();

        foreach (var item in viewModel.DayTimeSelectors)
        {
            Logger.LogInformation("{item}", item);
        }

        var openingHoursFromRepo = await OpeningHoursService.GetOpeningHoursAsync();

        try
        {
            if (viewModel.StartDate < DateTime.Now)
            {
                openingHoursFromRepo = openingHoursFromRepo.Where(oh => oh.OpenAt >= DateTime.Now);
            }


            foreach (var item in openingHoursFromRepo)
            {
                var result = await OpeningHoursService.DeleteOpeningHoursAsync(item);

                if (result)
                {
                    Logger.LogInformation("{date} - Opening Hours with ID \"{id}\" successfully deleted",
                        DateTime.Now, item.Id);
                }
                else
                {
                    Logger.LogError("{date} - Couldn't delete opening hours with ID \"{id}\"",
                        DateTime.Now, item.Id);
                }
            }
        }
        catch (Exception e)
        {
            Logger.LogError("{date} - An exception was thrown when trying to delete an opening hours : {e}",
                DateTime.Now, e.Message);
        }


        for (DateTime dti = viewModel.StartDate; dti <= viewModel.EndDate; dti = dti.AddDays(1))
        {
            var daySelector = viewModel.DayTimeSelectors
            .FirstOrDefault(dts => dts.IsSelected && dts.DayOfWeek == (DaysOfTheWeekFr)dti.DayOfWeek);

            bool isExceptionalyClosed = viewModel.ExceptionalCloses.Any(e => dti >= e.From && dti <= e.To);

            if (daySelector is not null && !isExceptionalyClosed)
            {
                openingHoursToCreate.Add(new OpeningHoursCreateModel()
                    {
                        OpenAt = new DateTime(
                                                    dti.Year,
                                                    dti.Month,
                                                    dti.Day,
                                                    daySelector.From.Hour,
                                                    daySelector.From.Minute,
                                                    0),
                        CloseAt = new DateTime(
                                                    dti.Year,
                                                    dti.Month,
                                                    dti.Day,
                                                    daySelector.To.Hour,
                                                    daySelector.To.Minute,
                                                    0)
                    });
            }
        }

        foreach (var openingHours in openingHoursToCreate)
        {
            try
            {
                var createdOpeningHours = await OpeningHoursService.CreateOpeningHoursAsync(openingHours);

                if (createdOpeningHours is null)
                {
                    Logger.LogError("{date} - Creating opening hours for \"{dateFrom}\" failed",
                        DateTime.Now, openingHours.OpenAt);
                }

                Logger.LogInformation("{date} - OpeningHours in the list start from \"{start}\" to \"{end}\"",
                    DateTime.Now, openingHours.OpenAt, openingHours.CloseAt);
            }
            catch (Exception e)
            {
                Logger.LogError("{date} - {exception}", DateTime.Now, e.Message);
            }
        }

        Logger.LogInformation("Form submitted");
    }


}
