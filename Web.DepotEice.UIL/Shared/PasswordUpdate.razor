@using Web.DepotEice.UIL.Models.Forms

<EditForm class="mt-3" Model="@UpdatePassword" OnValidSubmit="@OnValidationSubmit" style="width: 50%">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <label for="email" class="form-label">Nouveau mot de passe</label>
        <InputText type="password" class="form-control" id="password" aria-describedby="aide password"
        @bind-Value="UpdatePassword.Password" />
        <ValidationMessage class="text-danger" For="@(() => UpdatePassword.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirmer le nouveau mot de passe</label>
        <InputText type="password" class="form-control" id="confirmPassword"
                   aria-describedby="aide confirmation password" @bind-Value="UpdatePassword.ConfirmPassword" />
        <ValidationMessage class="text-danger" For="@(() => UpdatePassword.ConfirmPassword)" />
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-outline-primary mx-auto">
            Valider
        </button>
    </div>

    @if (RedirectToRegister)
    {
        <div class="mb-3">
            Si vous ne possédez pas de compte, inscrivez-vous <NavLink class="" href="register">ici</NavLink>
        </div>
    }
</EditForm>

@code {
    /// <summary>
    /// The reset password form
    /// </summary>
    [Parameter]
    public ResetPasswordForm UpdatePassword { get; set; } = new();

    /// <summary>
    /// The callback to execute when the form is valid and submitted
    /// </summary>
    [Parameter]
    public EventCallback OnFormExecuted { get; set; }

    /// <summary>
    /// Specify if the redirection to the register page should be displayed
    /// </summary>
    [Parameter]
    public bool RedirectToRegister { get; set; } = true;

    /// <summary>
    /// Event handler triggered when the form is valid and submitted
    /// </summary>
    /// <returns></returns>
    public async Task OnValidationSubmit()
    {
        await OnFormExecuted.InvokeAsync();
    }
}
