@page "/depot/modules"
@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models;
@using Web.DepotEice.UIL.Models.Forms;

@inject ILogger<Modules> Logger;
@inject IMapper Mapper;
@inject IModuleService ModuleService;
@inject UserManager UserManager;

<h3 class="text-center my-5">Modules</h3>

<div class="container">
    <Authorize Role="@UserManager.DIRECTION_ROLE">
        <Authorized>
            <div class="row">
                <NavLink href="depot/module-requests" class="text-dark">
                    Demandes d'acceptation aux modules (@NumberOfAcceptationDemands)
                </NavLink>
            </div>
        </Authorized>
    </Authorize>

    <EditForm class="py-3 border-bottom" Model="ModuleFilters" OnValidSubmit="( async () => await HandleFiltersValidSubmitAsync())">
        <div class="input-group mb-3">
            <button class="btn btn-outline-danger" type="button" id="clear" @onclick="ClearFiltersAsync">
                <i class="bi bi-x-lg"></i>
            </button>
            <InputText type="text" class="form-control" placeholder="Recherche" aria-label="Texte de recherche"
                       aria-describedby="Recherche" @bind-Value="ModuleFilters.SearchText" />
            <button class="btn btn-outline-secondary" type="submit" id="recherche">Recherche</button>
        </div>

        <Authorize Role="@UserManager.DIRECTION_ROLE">
            <Authorized>
                <NavLink class="btn btn-outline-primary" href="depot/manage-module">Créer un module</NavLink>
            </Authorized>
        </Authorize>
    </EditForm>

    <InfiniteScrolling @ref="ModulesScrolling" ItemsProvider="GetItemsAsync">
        <ItemTemplate Context="module">

            <div class="container">
                <div class="row border-bottom py-3 my-3">
                    <h3 class="border-bottom py-2">@module.Title</h3>
                    <p class="p-3">
                        @module.Description
                    </p>
                    <span>@module.TeacherName</span>
                    <div class="row">
                        <NavLink href="@($"{module.ModuleUrl}?ReturnUrl=/depot/modules")">Plus de détails</NavLink>

                        <Authorize Role="@UserManager.DIRECTION_ROLE">
                            <Authorized>
                                <NavLink href="@module.ModuleManageUrl">Gérer le module</NavLink>
                            </Authorized>
                        </Authorize>
                    </div>
                </div>
            </div>

        </ItemTemplate>
        <LoadingTemplate>
            <div class="d-flex justify-content-center text-center">
                <div class="mt-5 pt-5 spinner-border" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Chargement des modules...</span>
                </div>
            </div>
        </LoadingTemplate>
    </InfiniteScrolling>
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The list of toast messages to display (Components)
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    /// <summary>
    /// The module scrolling object
    /// </summary>
    public InfiniteScrolling<ModulePresentationModel>? ModulesScrolling { get; set; }

    /// <summary>
    /// Number of user requesting an acceptance to a module
    /// </summary>
    public int NumberOfAcceptationDemands { get; private set; } = 0;

    /// <summary>
    /// The object containing all the filters to apply on the search
    /// </summary>
    private ModuleFiltersForm ModuleFilters = new();

    protected override async Task OnInitializedAsync()
    {
        ResultModel<IEnumerable<UserModuleRequestModel>> result = await ModuleService.GetUsersRequestingModules();

        if (!result.Success)
        {
            Logger.LogError(
                "Requesting the user asking for a module failed with status code \"{code}\".\n{msg}",
                result.Code,
                result.Message
            );

            return;
        }

        if (result.Data is null)
        {
            Logger.LogError(
                "Requesting the users asking for a module succeded but the data is null.\n{msg}",
                result.Message
            );

            return;
        }

        NumberOfAcceptationDemands = result.Data.Count();
    }

    /// <summary>
    /// Event handler for <see cref="EditForm.OnValidSubmit"/> event. Reload the modules scrolling object with the
    /// new filters
    /// </summary>
    /// <returns></returns>
    private async Task HandleFiltersValidSubmitAsync()
    {
        if (ModulesScrolling is not null)
        {
            await ModulesScrolling.ReloadAsync();
        }
    }

    /// <summary>
    /// Event handler for the clear button. Clear all the filters and reload the modules scrolling object
    /// </summary>
    /// <returns></returns>
    private async Task ClearFiltersAsync()
    {
        ModuleFilters = new();

        if (ModulesScrolling is not null)
        {
            await ModulesScrolling.ReloadAsync();
        }
    }

    /// <summary>
    /// Event handler for the <see cref="InfiniteScrolling{T}.ItemsProvider"/> event. Get the modules from the
    /// repository and map them to <see cref="ModulePresentationModel"/> objects
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private async Task<IEnumerable<ModulePresentationModel>> GetItemsAsync(InfiniteScrollingItemsProviderRequest request)
    {
        ResultModel<IEnumerable<ModuleModel>> modulesResult = await ModuleService.GetModulesAsync();

        if (!modulesResult.Success)
        {
            Logger.LogError(
                "Requesting the modules failed with status code {code}.\n{msg}",
                modulesResult.Code,
                modulesResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Chargement des modules",
                $"Le chargement des modules a échoué.\n{modulesResult.Message}",
                false
            );

            return Enumerable.Empty<ModulePresentationModel>();
        }

        if (modulesResult.Data is null)
        {
            Logger.LogError(
                "The modules request succeded but the data is null.\n{msg}",
                modulesResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Chargement des modules",
                $"Le chargement des modules a réussi mais aucune donnée n'a été retourné.\n{modulesResult.Message}",
                false
            );

            return Enumerable.Empty<ModulePresentationModel>();
        }

        var modulesFromRepo = modulesResult.Data;

        if (!string.IsNullOrEmpty(ModuleFilters.SearchText))
        {
            modulesFromRepo = modulesFromRepo.Where(m =>
                m.Name.Contains(ModuleFilters.SearchText, StringComparison.InvariantCultureIgnoreCase) ||
                m.Description.Contains(ModuleFilters.SearchText, StringComparison.InvariantCultureIgnoreCase));
        }

        if (modulesFromRepo.Count() == 0)
        {
            return Enumerable.Empty<ModulePresentationModel>();
        }

        if (request.StartIndex >= modulesFromRepo.Count())
        {
            return Enumerable.Empty<ModulePresentationModel>();
        }

        try
        {
            modulesFromRepo = modulesFromRepo.ToList().GetRange(request.StartIndex,
               modulesFromRepo.Count() - request.StartIndex > 20
               ? 20
               : modulesFromRepo.Count());

            var modules = Mapper.Map<IEnumerable<ModulePresentationModel>>(modulesFromRepo);

            return modules;
        }
        catch (ArgumentOutOfRangeException e)
        {
            Logger.LogError($"{DateTime.Now} - One of the argument is out of range.\n{e.Message}\n{e.StackTrace}");
            return Enumerable.Empty<ModulePresentationModel>();
        }
        catch (Exception e)
        {
            Logger.LogError($"{DateTime.Now} - An exception was thrown when trying to load the rest of the data.\n" +
                $"{e.Message}\n{e.StackTrace}");

            return Enumerable.Empty<ModulePresentationModel>();
        }
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
