@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers;

@inject UserManager UserManager;
@inject ILogger<Authorize> Logger;
@inject IAuthService AuthService;

@if (IsAuthorized)
{
    @Authorized
}
else
{
    @Unauthorized
}

@code {
    /// <summary>
    /// The preload service
    /// </summary>
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// The role to check
    /// </summary>
    [Parameter]
    public string? Role { get; set; }

    /// <summary>
    /// The fragment rendered if the user is authorized
    /// </summary>
    [Parameter]
    public RenderFragment? Authorized { get; set; }

    /// <summary>
    /// The fragment rendered if the user is not authorized
    /// </summary>
    [Parameter]
    public RenderFragment? Unauthorized { get; set; }

    /// <summary>
    /// Verify if the user is authorized
    /// </summary>
    public bool IsAuthorized { get; private set; } = false;

    /// <summary>
    /// Initialize
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        PreloadService?.Show(SpinnerColor.Dark);

        Logger.LogInformation($"{DateTime.Now} - Requesting authorization for role \"{Role}\"");

        if (string.IsNullOrEmpty(Role))
        {
            ResultModel<bool> result = await AuthService.AuthorizeAsync();

            if (!result.Success)
            {
                Logger.LogError($"Getting authorization failed : \"{result.Message}\"");

                IsAuthorized = false;

                return;
            }

            IsAuthorized = result.Data;
        }
        else
        {
            IsAuthorized = await UserManager.IsInRoleAsync(Role);
        }

        PreloadService?.Hide();

        StateHasChanged();
    }
}