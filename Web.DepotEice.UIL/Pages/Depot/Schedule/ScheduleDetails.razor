@page "/depot/schedules/{Id:int}/details"

@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models;

@inject ILogger<ScheduleDetails> Logger;
@inject IMapper Mapper;
@inject IModuleService ModuleService;
@inject IUserService UserService;
@inject UserManager UserManager;
@inject ScheduleManager ScheduleManager;
@inject NavigationManager NavigationManager;

<PageTitle>EICE Dépot - @Schedule.Title</PageTitle>

<div class="container">
    <h3 class="my-3">
        @Schedule.ModuleName - @Schedule.StartAt.ToString("F")
    </h3>

    <span class="fs-5 fst-italic mb-3">
        Professeur en charge : @Schedule.TeacherName
    </span>

    <EditForm class="my-2" Model="Schedule" OnValidSubmit="HandleValidSubmit">

        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="pb-3">
            <div class="row mb-3">
                <label class="form-label" for="schedule-title">Intitulé</label>
                <Authorize Role="@UserManager.TEACHER_ROLE">
                    <Authorized>
                        <InputText @bind-Value="Schedule.Title" id="schedule-title" class="form-control" />
                        <ValidationMessage For="() => Schedule.Title" class="text-danger" />
                    </Authorized>
                    <Unauthorized>
                        <span id="schedule-title" class="form-control">@Schedule.Title</span>
                    </Unauthorized>
                </Authorize>
            </div>

            <div class="row mb-3">
                <label class="form-label" for="schedule-details">Détails</label>
                <Authorize Role="@UserManager.TEACHER_ROLE">
                    <Authorized>
                        <InputTextArea @bind-Value="Schedule.Details" id="schedule-details" class="form-control"
                                       style="height:25rem" />
                        <ValidationMessage For="() => Schedule.Details" class="text-danger" />
                    </Authorized>
                    <Unauthorized>
                        <span id="schedule-details" class="form-control" style="height:25rem">
                            @Schedule.Details
                        </span>
                    </Unauthorized>
                </Authorize>

            </div>
        </div>

        <hr />

        <div class="my-4">
            <Authorize Role="@UserManager.TEACHER_ROLE">
                <Authorized>
                    <div class="my-3">
                        <InputFile class="form-control" OnChange="OnFileChangedAsync" multiple />
                    </div>
                </Authorized>
            </Authorize>

            @foreach (var file in Schedule.ScheduleFiles)
            {
                <div class="input-group mb-3">
                    <a href="@($"{ApiBaseAddress}/Files/ByFileName/{file.FileName}")" class="form-control" download>
                        @file.FileName
                    </a>
                    <Authorize Role="@UserManager.TEACHER_ROLE">
                        <Authorized>
                            <button type="button" class="btn btn-outline-danger" @onclick="(() => DeleteFileAsync(file.Id))">
                                <i class="bi bi-trash"></i>
                            </button>
                        </Authorized>
                    </Authorize>
                </div>
            }
        </div>

        <Authorize Role="@UserManager.TEACHER_ROLE">
            <Authorized>
                <div class="row my-3">
                    <button type="submit" class="btn btn-outline-primary">
                        Enregistrer
                    </button>
                </div>
            </Authorized>
        </Authorize>
    </EditForm>
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The preload service
    /// </summary>
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// The id of the schedule
    /// </summary>
    [Parameter]
    public int Id { get; set; }

    /// <summary>
    /// The schedule details
    /// </summary>
    public ScheduleDetailsModel Schedule { get; private set; } = new();

    /// <summary>
    /// List of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    /// <summary>
    /// List of files to delete
    /// </summary>
    public List<ScheduleFileModel> FilesToDelete { get; set; } = new();

    /// <summary>
    /// List of files to upload
    /// </summary>
    public List<IBrowserFile> FilesToUpload { get; set; } = new();

#if DEBUG
    public string ApiBaseAddress { get; private set; } = "https://localhost:7205/api";
#else
    public string ApiBaseAddress { get; private set; } = "https://api-depot-eice.azurewebsites.net/api";
#endif

    /// <summary>
    /// Initialization of the component
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        PreloadService?.Show();

        Schedule = await ScheduleManager.GetScheduleAsync(Id);

        try
        {
            ResultModel<IEnumerable<ScheduleFileModel>> fileResult =
                await ModuleService.GetScheduleFilesAsync(Schedule.ModuleId, Schedule.Id);

            if (!fileResult.Success)
            {
                Logger.LogError(
                    "Request to get files for schedule with id \"{id}\" failed with status code \"{code}\"\n{msg}",
                    Schedule.Id,
                    fileResult.Code,
                    fileResult.Message
                );

                ShowMessage(
                    ToastType.Warning,
                    "Fichiers",
                    $"La récupération des fichiers a échoué.\n{fileResult.Message}",
                    false
                );

                PreloadService?.Hide();

                return;
            }

            if (fileResult.Data is null)
            {
                Logger.LogError(
                    "Request to get files for schedule with id \"{id}\" succeeded but returned null data\n{msg}",
                    Schedule.Id,
                    fileResult.Message
                );

                ShowMessage(
                    ToastType.Warning,
                    "Fichiers",
                    $"La récupération des fichiers est réussi mais aucune donnée n'a été retourné\n{fileResult.Message}",
                    true
                );

                PreloadService?.Hide();

                return;
            }

            Schedule.ScheduleFiles = fileResult.Data.ToList();
        }
        catch (Exception e)
        {
            Logger.LogError(
                "{date} - An exception was thrown when trying to retrieve files.\n{e.Message}\n{e.StackTrace}",
                DateTime.Now,
                e.Message,
                e.StackTrace
            );
        }

        PreloadService?.Hide();
    }

    /// <summary>
    /// Event raised when the user delete a file. Add the file to the list of files to delete.
    /// </summary>
    /// <param name="fileId">
    /// the id of the file to delete
    /// </param>
    public void DeleteFileAsync(int fileId)
    {
        PreloadService?.Show();

        ScheduleFileModel? file = Schedule.ScheduleFiles.SingleOrDefault(sf => sf.Id == fileId);

        if (file is null)
        {
            Logger.LogError(
                "{date} - There is no {type} with id \"{fileId}\" in the list of files",
                DateTime.Now,
                nameof(ScheduleFileModel),
                fileId
            );

            ShowMessage(ToastType.Warning, "Suppression impossible", "Le fichier n'existe pas dans la liste des fichiers", true);

            PreloadService?.Hide();

            return;
        }

        FilesToDelete.Add(file);

        Schedule.ScheduleFiles.Remove(file);

        StateHasChanged();

        PreloadService?.Hide();
    }

    /// <summary>
    /// Event raised when the user has selected files to upload. Add the files to the list of files to upload.
    /// </summary>
    /// <param name="args"></param>
    private void OnFileChangedAsync(InputFileChangeEventArgs args)
    {
        PreloadService?.Show();

        if (args.FileCount <= 0)
        {
            Logger.LogWarning("{date} - The number of files loaded is 0", DateTime.Now);

            ShowMessage(
                ToastType.Warning,
                "Ajout de fichiers",
                "Aucun fichier n'a été chargé",
                true
            );

            PreloadService?.Hide();

            return;
        }

        int nbFiles = args.FileCount;
        IReadOnlyList<IBrowserFile> files = args.GetMultipleFiles(nbFiles);

        FilesToUpload.AddRange(files);

        PreloadService?.Hide();
    }

    /// <summary>
    /// Submit the changes if the form is valid
    /// </summary>
    /// <returns></returns>
    public async Task HandleValidSubmit()
    {
        PreloadService?.Show();

        // Update the schedule
        ScheduleCreateModel schedule = Mapper.Map<ScheduleCreateModel>(Schedule);

        ResultModel<ScheduleModel> scheduleResult = await ModuleService.UpdateScheduleAsync(Schedule.ModuleId, Schedule.Id, schedule);

        if (!scheduleResult.Success)
        {
            Logger.LogError(
                "{date} - The update request for schedule with id \"{scheduleId}\" failed with status code {code}.\n{msg}",
                DateTime.Now,
                Schedule.Id,
                scheduleResult.Code,
                scheduleResult.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Échec de la mise à jour",
                $"La mise à jour du cours a échoué avec l'erreur\n{scheduleResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        if (scheduleResult.Data is null)
        {
            Logger.LogError(
                "{date} - The update request for schedule with id \"{id}\" succeeded but the returned data is null.\n{msg}",
                DateTime.Now,
                Schedule.Id,
                scheduleResult.Message
            );

            ShowMessage(
                ToastType.Warning,
                "Un problème est survenu",
                $"La mise à jour apprait comme réussi mais aucune donnée n'est retournée\n{scheduleResult.Message}",
                false
            );

            PreloadService?.Hide();

            return;
        }

        ShowMessage(
            ToastType.Success,
            "Modifications enregistrées",
            "Les détails du cours ont bien été enregistrés",
            true
        );

        if (FilesToDelete.Count > 0)
        {
            // Delete the files
            foreach (ScheduleFileModel scheduleFile in FilesToDelete)
            {
                ResultModel<bool> fileResult =
                    await ModuleService.DeleteScheduleFileAsync(Schedule.ModuleId, Schedule.Id, scheduleFile.Id);

                if (!fileResult.Success || !fileResult.Data)
                {
                    Logger.LogError(
                        "{date} - The delete request for file with id \"{fileId}\" failed with status code {code}.\n" +
                        "{msg}",
                        DateTime.Now,
                        scheduleFile,
                        fileResult.Code,
                        fileResult.Message
                    );

                    ShowMessage(
                        ToastType.Danger,
                        "Échec de la suppression",
                        $"La suprression du fichier {scheduleFile.FileName} a échouée avec l'erreur\n{fileResult.Message}",
                        false
                    );

                    PreloadService?.Hide();

                    continue;
                }
            }

            ShowMessage(
                ToastType.Success,
                "Suppression",
                "La suppression des fichiers a été effectuée avec succès",
                true
            );
        }

        // Upload the new files
        if (FilesToUpload.Count > 0)
        {
            ResultModel<bool> uploadResult = await ModuleService.UploadFilesAsync(Schedule.ModuleId, Schedule.Id, FilesToUpload);

            if (!uploadResult.Success || !uploadResult.Data)
            {
                Logger.LogError(
                    "{date} - The upload request for files failed with status code {code}.\n{msg}",
                    DateTime.Now,
                    uploadResult.Code,
                    uploadResult.Message
                );

                ShowMessage(
                    ToastType.Danger,
                    "Échec de l'envoi",
                    $"L'envoi des fichiers a échoué avec l'erreur\n{uploadResult.Message}",
                    false
                );

                PreloadService?.Hide();

                return;
            }

            ShowMessage(
                ToastType.Success,
                "Envoi des fichiers",
                "L'envoi des fichiers a été effectué avec succès",
                true
            );
        }

        PreloadService?.Hide();

        NavigationManager.NavigateTo($"/depot/schedules/{Id}/Details", true);
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
