@page "/register"
@page "/signup"

@using AutoMapper
@using Microsoft.Extensions.Logging;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Models.Forms;

@inject ILogger<Register> Logger;
@inject IAuthService AuthService;
@inject IMapper Mapper;

<PageTitle>EICE - Inscription</PageTitle>

<h2 class="text-center my-5">S'inscrire</h2>

<div class="container py-5 my-5 border border-1 bg-light">
    <EditForm class="mt-3" Model="@RegisterForm" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="mb-3">
            <label for="email-input" class="form-label">Adresse email</label>
            <InputText type="email" id="email-input" class="form-control" @bind-Value="RegisterForm.Email" />
            <ValidationMessage For="@(() => RegisterForm.Email)" />
        </div>

        <div class="mb-3">
            <label for="confirm-email-input" class="form-label">Confirmer l'adresse email</label>
            <InputText @bind-Value="RegisterForm.ConfirmEmail" type="email" id="confirm-email-input" class="form-control" />
            <ValidationMessage For="@(() => RegisterForm.ConfirmEmail)" />
        </div>

        <div class="mb-3">
            <label for="password-input" class="form-label">Mot de passe</label>
            <InputText type="password" id="password-input" class="form-control" @bind-Value="RegisterForm.Password" />
            <ValidationMessage For="@(() => RegisterForm.Password)" />
        </div>

        <div class="mb-3">
            <label for="confirm-password-input" class="form-label">Confirmer le mot de passe</label>
            <InputText @bind-Value="RegisterForm.ConfirmPassword" type="password" id="confirm-password-input" class="form-control" />
            <ValidationMessage For="@(() => RegisterForm.ConfirmPassword)" />
        </div>

        <div class="mb-3">
            <label for="firstname-input" class="form-label">Prénom</label>
            <InputText id="firstname-input" class="form-control" @bind-Value="RegisterForm.FirstName" />
            <ValidationMessage For="@(() => RegisterForm.FirstName)" />
        </div>

        <div class="mb-3">
            <label for="lastname-input" class="form-label">Nom</label>
            <InputText id="lastname-input" class="form-control" @bind-Value="RegisterForm.LastName" />
            <ValidationMessage For="@(() => RegisterForm.LastName)" />
        </div>

        <div class="mb-3">
            <label for="birthdate-input" class="form-label">Date de naissance</label>
            <InputDate id="birthdate-input" class="form-control" @bind-Value="RegisterForm.BirthDate" />
            <ValidationMessage For="@(() => RegisterForm.BirthDate)" />
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-outline-primary" style="min-width: 150px">
                S'inscrire
            </button>
        </div>

        <div class="mb-3">
            <span>
                Si vous avez déjà un compte, pour vous connecter cliquez <NavLink href="/login">ici</NavLink>
            </span>
        </div>
    </EditForm>

    @if (!string.IsNullOrEmpty(ResultMessage))
    {
        @if (Success)
        {
            <Alert Color="AlertColor.Success">
                <Icon Name="IconName.CheckCircleFill" class="me-2"></Icon>
                @ResultMessage
            </Alert>
        }
        else
        {
            <Alert Color="AlertColor.Danger">
                <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                @ResultMessage
            </Alert>
        }
    }
</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The preload service
    /// </summary>
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// The list of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; private set; } = new();

    /// <summary>
    /// The register form
    /// </summary>
    private RegisterForm RegisterForm { get; set; } = new();

    /// <summary>
    /// The result of the registration message
    /// </summary>
    private string ResultMessage { get; set; } = string.Empty;

    /// <summary>
    /// Specify if the registration was successful
    /// </summary>
    private bool Success { get; set; } = false;

    /// <summary>
    /// Event handler triggered when the user submits the form and the form is valid
    /// </summary>
    /// <returns></returns>
    private async Task HandleValidSubmit()
    {
        PreloadService?.Show();

        SignUpModel signUpModel = Mapper.Map<SignUpModel>(RegisterForm);

        ResultModel<bool> result = await AuthService.SignUpAsync(signUpModel);

        if (!result.Success || !result.Data)
        {
            Logger.LogError(
                "The registration of the account failed with status code {code} following message:\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Erreur",
                "La création du compte a échoué",
                true
            );

            ResultMessage = "L'enregistrement a échoué";

            PreloadService?.Hide();

            return;
        }

        ShowMessage(
            ToastType.Success,
            "Succès",
            "L'inscription a réussi. Veuillez vérifier vos mails pour confirmer votre adresse email",
            true
        );

        Success = result.Data;

        ResultMessage = "L'inscription a réussi. Veuillez vérifier vos mails pour confirmer votre adresse email";

        PreloadService?.Hide();
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}