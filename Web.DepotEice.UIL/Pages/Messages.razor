@page "/messages"

@using AutoMapper;
@using Blazored.LocalStorage;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;
@using Web.DepotEice.UIL.Managers;
@using Microsoft.AspNetCore.SignalR.Client;

@inject ILogger<Messages> Logger;
@inject IMapper Mapper;
@inject IMessageService MessageService;
@inject UserManager UserManager;
@inject NavigationManager NavigationManager;
@inject ILocalStorageService LocalStorageService;

<Authorize>
    <Authorized>
        <div class="container-fluid d-flex flex-row vh-100 my-3">
            <div class="col-3" style="overflow-y: scroll; overflow-x: hidden;">
                <div class="modal-dialog-scrollable">
                    <div class="d-flex flex-row">

                        <input type="text" class="form-control me-1 search-input" id="inlineFormInputGroup" placeholder="Search"
                               aria-label="search">
                        <button class="add" href="#">
                            <i class="bi bi-plus-circle fs-2 add-icon"></i>
                        </button>

                    </div>

                    <div class="border-end" style="border-radius: 0 0.5rem 0 0">
                        <div class="chat-list">

                            @if (Conversations is not null && Conversations.Count() > 0)
                            {
                                foreach (ConversationModel conversation in Conversations)
                                {
                                    <a class="d-flex my-1 p-3 align-items-center chat-box"
                                    @onclick="() => SelectedConversation = conversation">
                                        <div class="flex-shrink-0">

                                            @if (conversation.UserWithProfilePictureId is null)
                                            {
                                                <img class="profile-picture-img" alt="user img"
                                                     src="https://localhost:7205/api/Files/DefaultProfilePicture" />
                                            }
                                            else
                                            {
                                                <img class="profile-picture-img" alt="user img"
                                                     src="@($"https://localhost:7205/api/Files/ById/{conversation.UserWithProfilePictureId}")" />
                                            }

                                            <span class="active"></span>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <span class="fs-2">@conversation.UserWithFullName</span>
                                        </div>
                                    </a>
                                }
                            }
                            else
                            {
                                <span class="text-center fst-italic">Vous n'avez pas de conversation en cours</span>
                            }

                        </div>
                    </div>
                </div>
            </div>
            <div class="col ms-2" style="overflow: hidden">
                <div class="modal-content" style="height:100%;">
                    <div class="row border-bottom">
                        <div class="col-8">

                            @if (SelectedConversation is not null)
                            {
                                <div class="d-flex align-items-center">
                                    @if (SelectedConversation.UserWithProfilePictureId is null)
                                    {
                                        <img class="profile-picture-img" alt="user img"
                                             src="https://localhost:7205/api/Files/DefaultProfilePicture" />
                                    }
                                    else
                                    {
                                        <img class="profile-picture-img" alt="user img"
                                             src="@($"https://localhost:7205/api/Files/ById/{SelectedConversation.UserWithProfilePictureId}")" />
                                    }
                                    <div class="flex-grow-1 ms-3">
                                        <span class="fs-4">@SelectedConversation.UserWithFullName</span>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="col-4 d-flex align-content-start justify-content-end dropstart">
                            <ul>
                                <li class="navbar nav-item dropdown">
                                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown"
                                       aria-expanded="false">
                                        <i class="bi bi-three-dots-vertical"></i>
                                    </a>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#">Action</a></li>
                                        <li><a class="dropdown-item" href="#">Another action</a></li>
                                        <li>
                                            <hr class="dropdown-divider">
                                        </li>
                                        <li><a class="dropdown-item" href="#">Something else here</a></li>
                                    </ul>
                                </li>
                            </ul>
                        </div>
                    </div>

                    <div class="d-flex flex-column-reverse my-3" style="height: 100%; overflow-y: scroll">

                        @if (SelectedConversation is not null)
                        {
                            foreach (MessageModel message in SelectedConversation.Messages)
                            {
                                <div class="d-flex flex-column @(CurrentUserId.Equals(message.SenderId) ? "sender" : "replier")">
                                    <span class="chat-message"> @message.Content</span>
                                    <span class="align-self-end mx-2">@message.SentAt.ToString("g")</span>
                                </div>
                            }
                        }
                    </div>


                    <div class="d-flex flex-row">

                        <InputTextArea @bind-Value="MessageContent" class="form-control msg-body" aria-label="message…"
                                       placeholder="Écrivez votre message" style="height: 10rem; border-radius: 0.5rem 0 0 0.5rem;"
                        @onkeypress="OnMessageContentKeyPressed" />

                        <button class="btn btn-outline-primary btn-send" type="submit" @onclick="OnSendMessageClicked">
                            <i class="bi bi-send"></i> Envoyer
                        </button>

                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <Unauthorized>
        <h1>Vous n'êtes pas authorisé à accéder à la page</h1>
    </Unauthorized>
</Authorize>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />

@code {
    /// <summary>
    /// The list of Toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new();

    /// <summary>
    /// List of all conversations
    /// </summary>
    public IEnumerable<ConversationModel> Conversations { get; set; } = Enumerable.Empty<ConversationModel>();

    /// <summary>
    /// The id of the user currently logged in
    /// </summary>
    public string CurrentUserId { get; set; } = string.Empty;

    /// <summary>
    /// The selected conversation by the user
    /// </summary>
    public ConversationModel? SelectedConversation { get; set; }

    /// <summary>
    /// The message to send
    /// </summary>
    public string MessageContent { get; set; } = string.Empty;

    public HubConnection? HubConnection { get; private set; }

    /// <summary>
    /// Initialization of the component
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        string? userId = await UserManager.GetCurrentUserId();

        if (string.IsNullOrEmpty(userId))
        {
            NavigationManager.NavigateTo("/auth/login");

            return;
        }

        string? token = await LocalStorageService.GetItemAsStringAsync("token");

        if (string.IsNullOrEmpty(token))
        {
            if (await UserManager.SignOutAsync())
            {
                NavigationManager.NavigateTo($"/login?ReturnUrl=/messages", true);
            }
            else
            {
                ShowMessage(
                    ToastType.Danger,
                    "Token d'accès",
                    "Impossible de récupérer le token d'accès, se déconnecter et se rediriger vers la page de connexion",
                    false
                );
            }

            return;
        }

        CurrentUserId = userId;

        await LoadConversationsAsync();

        if (Conversations.Count() > 0)
        {
            SelectedConversation = Conversations.FirstOrDefault();
        }

        HubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:7205/hub/chat?access_token={token}")
            .Build();

        HubConnection.On<string>("receiveMessage", (message) =>
        {
            Logger.LogInformation(message);

            InvokeAsync(StateHasChanged);
        });

        HubConnection.On<string>("newUserConnected", userId =>
        {
            Logger.LogInformation("User with id \"{id}\" logged in", userId);
        });

        await HubConnection.StartAsync();
    }

    /// <summary>
    /// Load all the conversations
    /// </summary>
    /// <returns></returns>
    private async Task LoadConversationsAsync()
    {
        ResultModel<IEnumerable<ConversationModel>> result = await MessageService.GetConversationsAsync();

        if (!result.Success)
        {
            Logger.LogError(
                "Requesting the conversations failed with status code {code}.\n{msg}",
                result.Code,
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Conversations",
                $"La récupération des conversations a échoué.\n{result.Message}",
                false
            );

            return;
        }

        if (result.Data is null)
        {
            Logger.LogError(
                "Requesting the conversations succeeded but the returned data is null.\n{msg}",
                result.Message
            );

            ShowMessage(
                ToastType.Danger,
                "Conversations",
                $"La récupération des conversations a réussi mais les données retournées sont null.\n{result.Message}",
                false
            );

            return;
        }

        Conversations = result.Data;
    }

    /// <summary>
    /// Event handler triggered when the user click on the send message button
    /// </summary>
    /// <param name="args"></param>
    private void OnSendMessageClicked(MouseEventArgs args)
    {
        Logger.LogInformation(MessageContent);
    }

    /// <summary>
    /// Event handler triggered when the user press a key on the MessageContent input
    /// </summary>
    /// <param name="args"></param>
    private void OnMessageContentKeyPressed(KeyboardEventArgs args)
    {
        Logger.LogInformation(args.Key);
        if (args.Key.Equals("Enter"))
        {
            Logger.LogInformation(MessageContent);
            MessageContent = MessageContent.TrimEnd('\r', '\n');
        }
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
