@page "/depot/schedules/{Id:int}/details"

@inject ILogger<ScheduleDetails> Logger;
@inject IMapper Mapper;
@inject IModuleService ModuleService;
@inject IUserService UserService;
@inject UserManager UserManager;

@using AutoMapper;
@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models;

<PageTitle>EICE Dépot - @_scheduleDetails.Title</PageTitle>

<h3 class="text-center  my-5">Détails</h3>


<div class="container">

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <span class="text-danger fs-4">@_errorMessage</span>
    }

    <div class="row my-3">
        <span class="fs-5">
            Module : @_scheduleDetails.ModuleName
        </span>

        <span class="fs-5">
            Professeur en charge : @_scheduleDetails.TeacherName
        </span>
    </div>
    <EditForm Model="_scheduleDetails">

        <DataAnnotationsValidator></DataAnnotationsValidator>

        <div class="border-bottom pb-3">
            <div class="row mb-3">
                <label class="form-label">Intitulé</label>
                <InputText class="form-control" @bind-Value="_scheduleDetails.Title"
                           disabled="@(_isTeacher ? true : false)" />
            </div>

            <div class="row mb-3">
                <label class="form-label">Détails</label>
                <InputTextArea class="form-control" style="height:25rem" @bind-Value="_scheduleDetails.Details"
                               disabled="@(_isTeacher ? true : false)" />
            </div>
        </div>

        <div class="my-4 border-bottom">
            <div class="row my-3">
                <h4 class="text-center align-bottom">Fichiers</h4>
            </div>

            @if (_isTeacher)
            {
                <div class="my-3">
                    <InputFile class="form-control" OnChange="OnFileChangedAsync" />
                </div>
            }

            @foreach (var file in _scheduleDetails.ScheduleFiles)
            {
                <div class="input-group mb-3">
                    @*<span class="form-control" style="min-width:50%">blabla</span>*@
                    <NavLink href="@file.FilePath" class="form-control" style="min-width:50%" />
                    <button type="button" class="btn btn-outline-danger" @onclick="(async () => await DeleteFileAsync(file.Id))">
                        X
                    </button>
                </div>
            }
        </div>

        <div class="row my-3">
            <button type="submit" class="btn btn-outline-primary">
                Enregistrer
            </button>
        </div>
    </EditForm>
</div>

@code {
    // TODO : Limiter l'accès au professeur en charge

    [Parameter]
    public int Id { get; set; }

    private ScheduleDetailsModel _scheduleDetails = new();
    private bool _isTeacher = false;

    private string _errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var scheduleFromService = await ModuleService.GetScheduleAsync(Id);

        if (scheduleFromService is null)
        {
            Logger.LogError($"{DateTime.Now} - The schedule with ID \"{Id}\" doesn't exist");
            return;
        }

        _isTeacher = await UserManager.HasRole(UserManager.TEACHER_ROLE, scheduleFromService.ModuleId);

        if (scheduleFromService is null)
        {
            _errorMessage = $"Le cours que vous essayez de récupérer n'existe pas!";
            return;
        }

        ScheduleDetailsModel schedule = Mapper.Map<ScheduleDetailsModel>(scheduleFromService);

        var module = await ModuleService.GetModuleAsync(scheduleFromService.ModuleId);

        if (module is null)
        {
            Logger.LogError($"{DateTime.Now} - Module with ID \"{scheduleFromService.ModuleId}\" doesn't exist");
            return;
        }

        var user = await UserService.GetUserAsync(module.TeacherId);

        if (user is not null)
        {
            _scheduleDetails.TeacherName = $"{user.LastName.ToUpper()} {user.FirstName}";
        }

        Logger.LogInformation($"{module.Name}");

        _scheduleDetails.ModuleName = module.Name;

        try
        {
            _scheduleDetails.ScheduleFiles = (await ModuleService.GetScheduleFilesAsync(Id)).ToList();
        }
        catch (Exception e)
        {
            Logger.LogError($"{DateTime.Now} - An exception was thrown when trying to retrieve files.\n" +
                $"{e.Message}\n{e.StackTrace}");
        }

        StateHasChanged();
    }

    public async Task DownloadFileAsync(int fileId)
    {
        // TODO : Download file from API
    }

    public async Task DeleteFileAsync(int fileId)
    {
        bool result = await ModuleService.DeleteScheduleFileAsync(_scheduleDetails.ModuleId, _scheduleDetails.Id, fileId);

        if (result)
        {
            Logger.LogInformation($"{DateTime.Now} - File with ID \"{fileId}\" has been successfully deleted");

            var file = _scheduleDetails.ScheduleFiles.SingleOrDefault(sf => sf.Id.Equals(fileId));

            if (file is null)
            {
                Logger.LogError($"{DateTime.Now} - There is no {typeof(ScheduleDetailsModel)} with ID \"{fileId}\" " +
                    $"in the list");
                return;
            }

            _scheduleDetails.ScheduleFiles.Remove(file);
            StateHasChanged();
        }
    }

    public async Task OnFileChangedAsync(InputFileChangeEventArgs args)
    {
        if (args.FileCount <= 0)
        {
            Logger.LogWarning($"{DateTime.Now} - The number of files loaded is 0");
            return;
        }

        List<byte> fileStream = new();

        if (args.FileCount == 1)
        {
            var file = args.File;

            long index = 0;

            while (index < file.Size)
            {
                byte[] buffers = new byte[index >= file.Size ? file.Size - index : 512000];

                await file.OpenReadStream().ReadAsync(buffers);
                fileStream.AddRange(buffers.ToList());

                if (index + 512000 >= file.Size)
                {
                    index += (file.Size - 1 - index);
                }
                else
                {
                    index = index + 512000;
                }
            }
        }
        else
        {

        }
    }

    public async Task HandleValidSubmit()
    {
        // TODO : Delete file from file system
    }
}
