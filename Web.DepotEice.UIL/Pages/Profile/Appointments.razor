@page "/Profile/Appointments"

@using Web.DepotEice.BLL.IServices;
@using Web.DepotEice.BLL.Models;

@inject IAppointmentService AppointmentService;
@inject ILogger<Appointments> Logger;

<PageTitle>EICE - Mes rendez-vous</PageTitle>

<h2 class="text-center my-5">Mes rendez-vous</h2>

<div class="d-flex py-5 flex-wrap align-content-evenly mt-2 mb-2 main-articles" style="width: 100%; height: auto;">

    @if (ExistingAppointments is not null)
    {
        if (ExistingAppointments.Count <= 0)
        {
            <span>Vous n'avez actuellement aucun rendez-vous</span>
        }

        for (int i = 0; i < ExistingAppointments.Count; i++)
        {
            AppointmentModel appointment = ExistingAppointments[i];

            string appointmentUri = $"profile/appointments/{appointment.Id}?returnUrl=profile/appointments";

            <div class="card m-1" style="width: 24rem;">
                <div class="card-body">
                    <h5 class="card-title">@appointment.StartAt.ToString("F")</h5>


                    <NavLink href="@appointmentUri" class="card-link">Détails</NavLink>
                </div>
            </div>
        }
    }

</div>

<Toasts Class="p-3" Messages="ToastMessages" Delay="5000" />


@code {
    /// <summary>
    /// The list of existing user appointments
    /// </summary>
    public List<AppointmentModel> ExistingAppointments { get; private set; } = new();

    /// <summary>
    /// List of toast messages
    /// </summary>
    public List<ToastMessage> ToastMessages { get; set; } = new List<ToastMessage>();

    /// <summary>
    /// Initialization of the page
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        ResultModel<IEnumerable<AppointmentModel>> appointments = await AppointmentService.GetAppointmentsAsync(true);

        if (!appointments.Success)
        {
            string title = "Échec du chargement des rendez-vous";
            string body = "Les rendez-vous n'ont pas pu être chargé, veuillez essayer de recharger la page ou contacter l'administration";

            ShowMessage(ToastType.Danger, title, body, false);

            return;
        }

        if (appointments.Data is null)
        {
            string title = "Liste incorrecte";
            string body = "La liste de vos rendez-vous est dans un format incorrecte";

            ShowMessage(ToastType.Danger, title, body, false);

            return;
        }

        ExistingAppointments = appointments.Data.OrderByDescending(a => a.StartAt).ToList();

        StateHasChanged();
    }

    /// <summary>
    /// Add a new toast message to the list of toast messages
    /// </summary>
    /// <param name="toastType">The toast message type</param>
    /// <param name="title">The title of the toast message</param>
    /// <param name="message">The body message</param>
    /// <param name="autoHide">Decide if the toast should hide after a delay</param>
    private void ShowMessage(ToastType toastType, string title, string message, bool autoHide)
    {
        var toastMessage = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                Message = message,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
            };

        ToastMessages.Add(toastMessage);
    }
}
