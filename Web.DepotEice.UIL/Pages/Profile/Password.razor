@page "/Profile/Password"

@using AutoMapper
@using Web.DepotEice.BLL.IServices
@using Web.DepotEice.BLL.Models
@using Web.DepotEice.UIL.Managers;
@using Web.DepotEice.UIL.Models.Forms

@inject ILogger<Password> Logger;
@inject IUserService UserService;
@inject IMapper Mapper;
@inject UserManager UserManager;
@inject NavigationManager NavigationManager;


<PageTitle>EICE - Changer le mot de passe</PageTitle>

<h3 class="text-center my-5">Créer un nouveau mot de passe</h3>

<div class="container my-5 py-5 bg-light border border-1 d-flex justify-content-center">
    <EditForm Model="_passwordUpdateForm" OnValidSubmit="OnValidSubmit" style="width:50%;">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="current-password" class="form-label">Mot de passe actuel</label>

            <InputText id="current-password" type="password" class="form-control" aria-describedby="mot de passe actuel"
            @bind-Value="_passwordUpdateForm.CurrentPassword" />

            <ValidationMessage class="text-danger" For="@(() => _passwordUpdateForm.CurrentPassword)" />
        </div>

        <div class="mb-3">
            <label for="new-password" class="form-label">Nouveau mot de passe</label>

            <InputText id="new-password" type="password" class="form-control" aria-describedby="nouveau mot de passe"
            @bind-Value="_passwordUpdateForm.NewPassword" />

            <ValidationMessage class="text-danger" For="@(() => _passwordUpdateForm.NewPassword)" />
        </div>

        <div class="mb-3">
            <label for="confirm-new-password" class="form-label">Confirmation du nouveau mot de passe</label>

            <InputText id="confirm-new-password" type="password" class="form-control" aria-describedby="confirmation du nouveau mot de passe"
            @bind-Value="_passwordUpdateForm.ConfirmNewPassword" />

            <ValidationMessage class="text-danger" For="@(() => _passwordUpdateForm.ConfirmNewPassword)" />
        </div>

        <button class="btn btn-outline-primary" type="submit">Envoyer</button>
    </EditForm>
</div>

<Preload />

<Toasts Class="p-3" Delay="5000" Messages="_toastMessages" />

<ConfirmDialog @ref="_dialog" />

@code {
    /// <summary>
    /// The confirm dialog.
    /// </summary>
    private ConfirmDialog _dialog = new ConfirmDialog();

    /// <summary>
    /// The toast messages.
    /// </summary>
    private List<ToastMessage> _toastMessages = new List<ToastMessage>();

    /// <summary>
    /// The password update form.
    /// </summary>
    private PasswordUpdateForm _passwordUpdateForm = new PasswordUpdateForm();

    /// <summary>
    /// The injected preload service.
    /// </summary>
    [Inject]
    public PreloadService? PreloadService { get; set; }

    /// <summary>
    /// Event handler execute when the form is submitted and the data is valid.
    /// </summary>
    /// <returns></returns>
    private async Task OnValidSubmit()
    {
        bool confirmation = await _dialog.ShowAsync(
            "Mise à jour du mot de passe",
            "Lorsque votre mot de passe sera mis à jour, votre session sera supprimée et vous serez déconnecté. Voulez-vous confirmer ?",
            new ConfirmDialogOptions()
                {
                    YesButtonColor = ButtonColor.Primary,
                    YesButtonText = "Confirmer",
                    NoButtonColor = ButtonColor.Secondary,
                    NoButtonText = "Annuler"

                }
            );

        if (!confirmation)
        {
            Logger.LogInformation($"{OnValidSubmit}: Modification annulée");
            return;
        }

        bool hasSignedOut = false;

        try
        {
            PreloadService?.Show(SpinnerColor.Dark);

            PasswordUpdateModel passwordUpdate = Mapper.Map<PasswordUpdateModel>(_passwordUpdateForm);

            ResultModel<UserModel> result = await UserService.UpdatePasswordAsync(passwordUpdate);

            if (!result.Success)
            {
                Logger.LogInformation("The update of the password failed.");

                ShowMessage("Erreur", $"La mise à jour du mot de passe a échoué.\n{result.Message}", ToastType.Danger, false);

                return;
            }

            Logger.LogInformation("The password has been updated.");

            hasSignedOut = await UserManager.SignOutAsync();

            ShowMessage("Succès", "Le mot de passe a été mis à jour avec succès. Vous allez être déconnecté", ToastType.Success);
        }
        catch (Exception e)
        {
            Logger.LogError($"An exception was thrown when updating the password.\n{e.Message}");
        }
        finally
        {
            PreloadService?.Hide();

            if (hasSignedOut)
            {
                NavigationManager.NavigateTo("/", true);
            }
        }
    }

    /// <summary>
    /// Show a toast message
    /// </summary>
    /// <param name="title">The title</param>
    /// <param name="body">The body</param>
    /// <param name="type">The toast type</param>
    /// <param name="autoHide">If the toast message should disappear after a certain delay</param>
    private void ShowMessage(string title, string body, ToastType type, bool autoHide = true)
    {
        _toastMessages.Add(new ToastMessage
            {
                Title = title,
                Message = body,
                AutoHide = autoHide,
                HelpText = $"{DateTime.Now}",
                Type = type
            });
    }
}